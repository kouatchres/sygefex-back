# source: https://eu1.prisma.sh/kouatchoua/sygefex-back/dev
# timestamp: Sat May 30 2020 16:47:23 GMT+0100 (West Africa Standard Time)

type AggregateCandidate {
  count: Int!
}

type AggregateCenter {
  count: Int!
}

type AggregateCenterExamSession {
  count: Int!
}

type AggregateCenterExamSessionExaminer {
  count: Int!
}

type AggregateCenterExamSessionSeries {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDivision {
  count: Int!
}

type AggregateEducationType {
  count: Int!
}

type AggregateExam {
  count: Int!
}

type AggregateExaminer {
  count: Int!
}

type AggregateExamSession {
  count: Int!
}

type AggregateGender {
  count: Int!
}

type AggregateOffice {
  count: Int!
}

type AggregatePhase {
  count: Int!
}

type AggregatePhaseRank {
  count: Int!
}

type AggregateRank {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateRegistration {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type AggregateScore {
  count: Int!
}

type AggregateSeries {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSubDivision {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubjectSeries {
  count: Int!
}

type AggregateSubjectType {
  count: Int!
}

type AggregateTown {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Candidate implements Node {
  id: ID!
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String!
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  gender: Gender!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
}

"""A connection to a list of items."""
type CandidateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandidateEdge]!
  aggregate: AggregateCandidate!
}

input CandidateCreateInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String!
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderCreateOneWithoutCandidateInput!
  registration: RegistrationCreateManyWithoutCandidateInput
}

input CandidateCreateManyWithoutGenderInput {
  create: [CandidateCreateWithoutGenderInput!]
  connect: [CandidateWhereUniqueInput!]
}

input CandidateCreateOneWithoutRegistrationInput {
  create: CandidateCreateWithoutRegistrationInput
  connect: CandidateWhereUniqueInput
}

input CandidateCreateWithoutGenderInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String!
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  registration: RegistrationCreateManyWithoutCandidateInput
}

input CandidateCreateWithoutRegistrationInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String!
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderCreateOneWithoutCandidateInput!
}

"""An edge in a connection."""
type CandidateEdge {
  """The item at the end of the edge."""
  node: Candidate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandidateOrderByInput {
  id_ASC
  id_DESC
  cand1stName_ASC
  cand1stName_DESC
  cand2ndName_ASC
  cand2ndName_DESC
  cand3rdName_ASC
  cand3rdName_DESC
  placeOfBirth_ASC
  placeOfBirth_DESC
  momName_ASC
  momName_DESC
  dadName_ASC
  dadName_DESC
  image_ASC
  image_DESC
  birthCertNumber_ASC
  birthCertNumber_DESC
  candCode_ASC
  candCode_DESC
  email_ASC
  email_DESC
  phoneNumb_ASC
  phoneNumb_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CandidatePreviousValues {
  id: ID!
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String!
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CandidateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cand1stName: String

  """All values that are not equal to given value."""
  cand1stName_not: String

  """All values that are contained in given list."""
  cand1stName_in: [String!]

  """All values that are not contained in given list."""
  cand1stName_not_in: [String!]

  """All values less than the given value."""
  cand1stName_lt: String

  """All values less than or equal the given value."""
  cand1stName_lte: String

  """All values greater than the given value."""
  cand1stName_gt: String

  """All values greater than or equal the given value."""
  cand1stName_gte: String

  """All values containing the given string."""
  cand1stName_contains: String

  """All values not containing the given string."""
  cand1stName_not_contains: String

  """All values starting with the given string."""
  cand1stName_starts_with: String

  """All values not starting with the given string."""
  cand1stName_not_starts_with: String

  """All values ending with the given string."""
  cand1stName_ends_with: String

  """All values not ending with the given string."""
  cand1stName_not_ends_with: String
  cand2ndName: String

  """All values that are not equal to given value."""
  cand2ndName_not: String

  """All values that are contained in given list."""
  cand2ndName_in: [String!]

  """All values that are not contained in given list."""
  cand2ndName_not_in: [String!]

  """All values less than the given value."""
  cand2ndName_lt: String

  """All values less than or equal the given value."""
  cand2ndName_lte: String

  """All values greater than the given value."""
  cand2ndName_gt: String

  """All values greater than or equal the given value."""
  cand2ndName_gte: String

  """All values containing the given string."""
  cand2ndName_contains: String

  """All values not containing the given string."""
  cand2ndName_not_contains: String

  """All values starting with the given string."""
  cand2ndName_starts_with: String

  """All values not starting with the given string."""
  cand2ndName_not_starts_with: String

  """All values ending with the given string."""
  cand2ndName_ends_with: String

  """All values not ending with the given string."""
  cand2ndName_not_ends_with: String
  cand3rdName: String

  """All values that are not equal to given value."""
  cand3rdName_not: String

  """All values that are contained in given list."""
  cand3rdName_in: [String!]

  """All values that are not contained in given list."""
  cand3rdName_not_in: [String!]

  """All values less than the given value."""
  cand3rdName_lt: String

  """All values less than or equal the given value."""
  cand3rdName_lte: String

  """All values greater than the given value."""
  cand3rdName_gt: String

  """All values greater than or equal the given value."""
  cand3rdName_gte: String

  """All values containing the given string."""
  cand3rdName_contains: String

  """All values not containing the given string."""
  cand3rdName_not_contains: String

  """All values starting with the given string."""
  cand3rdName_starts_with: String

  """All values not starting with the given string."""
  cand3rdName_not_starts_with: String

  """All values ending with the given string."""
  cand3rdName_ends_with: String

  """All values not ending with the given string."""
  cand3rdName_not_ends_with: String
  placeOfBirth: String

  """All values that are not equal to given value."""
  placeOfBirth_not: String

  """All values that are contained in given list."""
  placeOfBirth_in: [String!]

  """All values that are not contained in given list."""
  placeOfBirth_not_in: [String!]

  """All values less than the given value."""
  placeOfBirth_lt: String

  """All values less than or equal the given value."""
  placeOfBirth_lte: String

  """All values greater than the given value."""
  placeOfBirth_gt: String

  """All values greater than or equal the given value."""
  placeOfBirth_gte: String

  """All values containing the given string."""
  placeOfBirth_contains: String

  """All values not containing the given string."""
  placeOfBirth_not_contains: String

  """All values starting with the given string."""
  placeOfBirth_starts_with: String

  """All values not starting with the given string."""
  placeOfBirth_not_starts_with: String

  """All values ending with the given string."""
  placeOfBirth_ends_with: String

  """All values not ending with the given string."""
  placeOfBirth_not_ends_with: String
  momName: String

  """All values that are not equal to given value."""
  momName_not: String

  """All values that are contained in given list."""
  momName_in: [String!]

  """All values that are not contained in given list."""
  momName_not_in: [String!]

  """All values less than the given value."""
  momName_lt: String

  """All values less than or equal the given value."""
  momName_lte: String

  """All values greater than the given value."""
  momName_gt: String

  """All values greater than or equal the given value."""
  momName_gte: String

  """All values containing the given string."""
  momName_contains: String

  """All values not containing the given string."""
  momName_not_contains: String

  """All values starting with the given string."""
  momName_starts_with: String

  """All values not starting with the given string."""
  momName_not_starts_with: String

  """All values ending with the given string."""
  momName_ends_with: String

  """All values not ending with the given string."""
  momName_not_ends_with: String
  dadName: String

  """All values that are not equal to given value."""
  dadName_not: String

  """All values that are contained in given list."""
  dadName_in: [String!]

  """All values that are not contained in given list."""
  dadName_not_in: [String!]

  """All values less than the given value."""
  dadName_lt: String

  """All values less than or equal the given value."""
  dadName_lte: String

  """All values greater than the given value."""
  dadName_gt: String

  """All values greater than or equal the given value."""
  dadName_gte: String

  """All values containing the given string."""
  dadName_contains: String

  """All values not containing the given string."""
  dadName_not_contains: String

  """All values starting with the given string."""
  dadName_starts_with: String

  """All values not starting with the given string."""
  dadName_not_starts_with: String

  """All values ending with the given string."""
  dadName_ends_with: String

  """All values not ending with the given string."""
  dadName_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  birthCertNumber: String

  """All values that are not equal to given value."""
  birthCertNumber_not: String

  """All values that are contained in given list."""
  birthCertNumber_in: [String!]

  """All values that are not contained in given list."""
  birthCertNumber_not_in: [String!]

  """All values less than the given value."""
  birthCertNumber_lt: String

  """All values less than or equal the given value."""
  birthCertNumber_lte: String

  """All values greater than the given value."""
  birthCertNumber_gt: String

  """All values greater than or equal the given value."""
  birthCertNumber_gte: String

  """All values containing the given string."""
  birthCertNumber_contains: String

  """All values not containing the given string."""
  birthCertNumber_not_contains: String

  """All values starting with the given string."""
  birthCertNumber_starts_with: String

  """All values not starting with the given string."""
  birthCertNumber_not_starts_with: String

  """All values ending with the given string."""
  birthCertNumber_ends_with: String

  """All values not ending with the given string."""
  birthCertNumber_not_ends_with: String
  candCode: String

  """All values that are not equal to given value."""
  candCode_not: String

  """All values that are contained in given list."""
  candCode_in: [String!]

  """All values that are not contained in given list."""
  candCode_not_in: [String!]

  """All values less than the given value."""
  candCode_lt: String

  """All values less than or equal the given value."""
  candCode_lte: String

  """All values greater than the given value."""
  candCode_gt: String

  """All values greater than or equal the given value."""
  candCode_gte: String

  """All values containing the given string."""
  candCode_contains: String

  """All values not containing the given string."""
  candCode_not_contains: String

  """All values starting with the given string."""
  candCode_starts_with: String

  """All values not starting with the given string."""
  candCode_not_starts_with: String

  """All values ending with the given string."""
  candCode_ends_with: String

  """All values not ending with the given string."""
  candCode_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phoneNumb: Int

  """All values that are not equal to given value."""
  phoneNumb_not: Int

  """All values that are contained in given list."""
  phoneNumb_in: [Int!]

  """All values that are not contained in given list."""
  phoneNumb_not_in: [Int!]

  """All values less than the given value."""
  phoneNumb_lt: Int

  """All values less than or equal the given value."""
  phoneNumb_lte: Int

  """All values greater than the given value."""
  phoneNumb_gt: Int

  """All values greater than or equal the given value."""
  phoneNumb_gte: Int
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CandidateSubscriptionPayload {
  mutation: MutationType!
  node: Candidate
  updatedFields: [String!]
  previousValues: CandidatePreviousValues
}

input CandidateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandidateWhereInput
}

input CandidateUpdateInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderUpdateOneRequiredWithoutCandidateInput
  registration: RegistrationUpdateManyWithoutCandidateInput
}

input CandidateUpdateManyDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
}

input CandidateUpdateManyMutationInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
}

input CandidateUpdateManyWithoutGenderInput {
  create: [CandidateCreateWithoutGenderInput!]
  connect: [CandidateWhereUniqueInput!]
  set: [CandidateWhereUniqueInput!]
  disconnect: [CandidateWhereUniqueInput!]
  delete: [CandidateWhereUniqueInput!]
  update: [CandidateUpdateWithWhereUniqueWithoutGenderInput!]
  updateMany: [CandidateUpdateManyWithWhereNestedInput!]
  deleteMany: [CandidateScalarWhereInput!]
  upsert: [CandidateUpsertWithWhereUniqueWithoutGenderInput!]
}

input CandidateUpdateManyWithWhereNestedInput {
  where: CandidateScalarWhereInput!
  data: CandidateUpdateManyDataInput!
}

input CandidateUpdateOneRequiredWithoutRegistrationInput {
  create: CandidateCreateWithoutRegistrationInput
  connect: CandidateWhereUniqueInput
  update: CandidateUpdateWithoutRegistrationDataInput
  upsert: CandidateUpsertWithoutRegistrationInput
}

input CandidateUpdateWithoutGenderDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  registration: RegistrationUpdateManyWithoutCandidateInput
}

input CandidateUpdateWithoutRegistrationDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  momName: String
  dadName: String
  image: String
  birthCertNumber: String
  candCode: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderUpdateOneRequiredWithoutCandidateInput
}

input CandidateUpdateWithWhereUniqueWithoutGenderInput {
  where: CandidateWhereUniqueInput!
  data: CandidateUpdateWithoutGenderDataInput!
}

input CandidateUpsertWithoutRegistrationInput {
  update: CandidateUpdateWithoutRegistrationDataInput!
  create: CandidateCreateWithoutRegistrationInput!
}

input CandidateUpsertWithWhereUniqueWithoutGenderInput {
  where: CandidateWhereUniqueInput!
  update: CandidateUpdateWithoutGenderDataInput!
  create: CandidateCreateWithoutGenderInput!
}

input CandidateWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cand1stName: String

  """All values that are not equal to given value."""
  cand1stName_not: String

  """All values that are contained in given list."""
  cand1stName_in: [String!]

  """All values that are not contained in given list."""
  cand1stName_not_in: [String!]

  """All values less than the given value."""
  cand1stName_lt: String

  """All values less than or equal the given value."""
  cand1stName_lte: String

  """All values greater than the given value."""
  cand1stName_gt: String

  """All values greater than or equal the given value."""
  cand1stName_gte: String

  """All values containing the given string."""
  cand1stName_contains: String

  """All values not containing the given string."""
  cand1stName_not_contains: String

  """All values starting with the given string."""
  cand1stName_starts_with: String

  """All values not starting with the given string."""
  cand1stName_not_starts_with: String

  """All values ending with the given string."""
  cand1stName_ends_with: String

  """All values not ending with the given string."""
  cand1stName_not_ends_with: String
  cand2ndName: String

  """All values that are not equal to given value."""
  cand2ndName_not: String

  """All values that are contained in given list."""
  cand2ndName_in: [String!]

  """All values that are not contained in given list."""
  cand2ndName_not_in: [String!]

  """All values less than the given value."""
  cand2ndName_lt: String

  """All values less than or equal the given value."""
  cand2ndName_lte: String

  """All values greater than the given value."""
  cand2ndName_gt: String

  """All values greater than or equal the given value."""
  cand2ndName_gte: String

  """All values containing the given string."""
  cand2ndName_contains: String

  """All values not containing the given string."""
  cand2ndName_not_contains: String

  """All values starting with the given string."""
  cand2ndName_starts_with: String

  """All values not starting with the given string."""
  cand2ndName_not_starts_with: String

  """All values ending with the given string."""
  cand2ndName_ends_with: String

  """All values not ending with the given string."""
  cand2ndName_not_ends_with: String
  cand3rdName: String

  """All values that are not equal to given value."""
  cand3rdName_not: String

  """All values that are contained in given list."""
  cand3rdName_in: [String!]

  """All values that are not contained in given list."""
  cand3rdName_not_in: [String!]

  """All values less than the given value."""
  cand3rdName_lt: String

  """All values less than or equal the given value."""
  cand3rdName_lte: String

  """All values greater than the given value."""
  cand3rdName_gt: String

  """All values greater than or equal the given value."""
  cand3rdName_gte: String

  """All values containing the given string."""
  cand3rdName_contains: String

  """All values not containing the given string."""
  cand3rdName_not_contains: String

  """All values starting with the given string."""
  cand3rdName_starts_with: String

  """All values not starting with the given string."""
  cand3rdName_not_starts_with: String

  """All values ending with the given string."""
  cand3rdName_ends_with: String

  """All values not ending with the given string."""
  cand3rdName_not_ends_with: String
  placeOfBirth: String

  """All values that are not equal to given value."""
  placeOfBirth_not: String

  """All values that are contained in given list."""
  placeOfBirth_in: [String!]

  """All values that are not contained in given list."""
  placeOfBirth_not_in: [String!]

  """All values less than the given value."""
  placeOfBirth_lt: String

  """All values less than or equal the given value."""
  placeOfBirth_lte: String

  """All values greater than the given value."""
  placeOfBirth_gt: String

  """All values greater than or equal the given value."""
  placeOfBirth_gte: String

  """All values containing the given string."""
  placeOfBirth_contains: String

  """All values not containing the given string."""
  placeOfBirth_not_contains: String

  """All values starting with the given string."""
  placeOfBirth_starts_with: String

  """All values not starting with the given string."""
  placeOfBirth_not_starts_with: String

  """All values ending with the given string."""
  placeOfBirth_ends_with: String

  """All values not ending with the given string."""
  placeOfBirth_not_ends_with: String
  momName: String

  """All values that are not equal to given value."""
  momName_not: String

  """All values that are contained in given list."""
  momName_in: [String!]

  """All values that are not contained in given list."""
  momName_not_in: [String!]

  """All values less than the given value."""
  momName_lt: String

  """All values less than or equal the given value."""
  momName_lte: String

  """All values greater than the given value."""
  momName_gt: String

  """All values greater than or equal the given value."""
  momName_gte: String

  """All values containing the given string."""
  momName_contains: String

  """All values not containing the given string."""
  momName_not_contains: String

  """All values starting with the given string."""
  momName_starts_with: String

  """All values not starting with the given string."""
  momName_not_starts_with: String

  """All values ending with the given string."""
  momName_ends_with: String

  """All values not ending with the given string."""
  momName_not_ends_with: String
  dadName: String

  """All values that are not equal to given value."""
  dadName_not: String

  """All values that are contained in given list."""
  dadName_in: [String!]

  """All values that are not contained in given list."""
  dadName_not_in: [String!]

  """All values less than the given value."""
  dadName_lt: String

  """All values less than or equal the given value."""
  dadName_lte: String

  """All values greater than the given value."""
  dadName_gt: String

  """All values greater than or equal the given value."""
  dadName_gte: String

  """All values containing the given string."""
  dadName_contains: String

  """All values not containing the given string."""
  dadName_not_contains: String

  """All values starting with the given string."""
  dadName_starts_with: String

  """All values not starting with the given string."""
  dadName_not_starts_with: String

  """All values ending with the given string."""
  dadName_ends_with: String

  """All values not ending with the given string."""
  dadName_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  birthCertNumber: String

  """All values that are not equal to given value."""
  birthCertNumber_not: String

  """All values that are contained in given list."""
  birthCertNumber_in: [String!]

  """All values that are not contained in given list."""
  birthCertNumber_not_in: [String!]

  """All values less than the given value."""
  birthCertNumber_lt: String

  """All values less than or equal the given value."""
  birthCertNumber_lte: String

  """All values greater than the given value."""
  birthCertNumber_gt: String

  """All values greater than or equal the given value."""
  birthCertNumber_gte: String

  """All values containing the given string."""
  birthCertNumber_contains: String

  """All values not containing the given string."""
  birthCertNumber_not_contains: String

  """All values starting with the given string."""
  birthCertNumber_starts_with: String

  """All values not starting with the given string."""
  birthCertNumber_not_starts_with: String

  """All values ending with the given string."""
  birthCertNumber_ends_with: String

  """All values not ending with the given string."""
  birthCertNumber_not_ends_with: String
  candCode: String

  """All values that are not equal to given value."""
  candCode_not: String

  """All values that are contained in given list."""
  candCode_in: [String!]

  """All values that are not contained in given list."""
  candCode_not_in: [String!]

  """All values less than the given value."""
  candCode_lt: String

  """All values less than or equal the given value."""
  candCode_lte: String

  """All values greater than the given value."""
  candCode_gt: String

  """All values greater than or equal the given value."""
  candCode_gte: String

  """All values containing the given string."""
  candCode_contains: String

  """All values not containing the given string."""
  candCode_not_contains: String

  """All values starting with the given string."""
  candCode_starts_with: String

  """All values not starting with the given string."""
  candCode_not_starts_with: String

  """All values ending with the given string."""
  candCode_ends_with: String

  """All values not ending with the given string."""
  candCode_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phoneNumb: Int

  """All values that are not equal to given value."""
  phoneNumb_not: Int

  """All values that are contained in given list."""
  phoneNumb_in: [Int!]

  """All values that are not contained in given list."""
  phoneNumb_not_in: [Int!]

  """All values less than the given value."""
  phoneNumb_lt: Int

  """All values less than or equal the given value."""
  phoneNumb_lte: Int

  """All values greater than the given value."""
  phoneNumb_gt: Int

  """All values greater than or equal the given value."""
  phoneNumb_gte: Int
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  gender: GenderWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
}

input CandidateWhereUniqueInput {
  id: ID
  candCode: String
  email: String
}

type Center implements Node {
  id: ID!
  centerName: String!
  centerCode: String!
  centerSecretCode: String!
  town: Town!
  centerNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  centerExamSessionExaminer(where: CenterExamSessionExaminerWhereInput, orderBy: CenterExamSessionExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionExaminer!]
  centerExamSession(where: CenterExamSessionWhereInput, orderBy: CenterExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSession!]
}

"""A connection to a list of items."""
type CenterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterEdge]!
  aggregate: AggregateCenter!
}

input CenterCreateInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerSecretCode: String!
  centerNumber: Int!
  town: TownCreateOneWithoutCenterInput!
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyInput
  centerExamSession: CenterExamSessionCreateManyWithoutCenterInput
}

input CenterCreateManyWithoutTownInput {
  create: [CenterCreateWithoutTownInput!]
  connect: [CenterWhereUniqueInput!]
}

input CenterCreateOneWithoutCenterExamSessionInput {
  create: CenterCreateWithoutCenterExamSessionInput
  connect: CenterWhereUniqueInput
}

input CenterCreateWithoutCenterExamSessionInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerSecretCode: String!
  centerNumber: Int!
  town: TownCreateOneWithoutCenterInput!
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyInput
}

input CenterCreateWithoutTownInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerSecretCode: String!
  centerNumber: Int!
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyInput
  centerExamSession: CenterExamSessionCreateManyWithoutCenterInput
}

"""An edge in a connection."""
type CenterEdge {
  """The item at the end of the edge."""
  node: Center!

  """A cursor for use in pagination."""
  cursor: String!
}

type CenterExamSession implements Node {
  id: ID!
  examSession: ExamSession!
  center: Center!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
  centerExamSessionSeries(where: CenterExamSessionSeriesWhereInput, orderBy: CenterExamSessionSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionSeries!]
  createdAt: DateTime!
  updatedAt: DateTime!
  centerExamSessionExaminer(where: CenterExamSessionExaminerWhereInput, orderBy: CenterExamSessionExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionExaminer!]
}

"""A connection to a list of items."""
type CenterExamSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterExamSessionEdge]!
  aggregate: AggregateCenterExamSession!
}

input CenterExamSessionCreateInput {
  id: ID
  examSession: ExamSessionCreateOneWithoutCenterExamSessionInput!
  center: CenterCreateOneWithoutCenterExamSessionInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput
}

input CenterExamSessionCreateManyWithoutCenterInput {
  create: [CenterExamSessionCreateWithoutCenterInput!]
  connect: [CenterExamSessionWhereUniqueInput!]
}

input CenterExamSessionCreateManyWithoutExamSessionInput {
  create: [CenterExamSessionCreateWithoutExamSessionInput!]
  connect: [CenterExamSessionWhereUniqueInput!]
}

input CenterExamSessionCreateOneWithoutCenterExamSessionExaminerInput {
  create: CenterExamSessionCreateWithoutCenterExamSessionExaminerInput
  connect: CenterExamSessionWhereUniqueInput
}

input CenterExamSessionCreateOneWithoutCenterExamSessionSeriesInput {
  create: CenterExamSessionCreateWithoutCenterExamSessionSeriesInput
  connect: CenterExamSessionWhereUniqueInput
}

input CenterExamSessionCreateOneWithoutRegistrationInput {
  create: CenterExamSessionCreateWithoutRegistrationInput
  connect: CenterExamSessionWhereUniqueInput
}

input CenterExamSessionCreateWithoutCenterExamSessionExaminerInput {
  id: ID
  examSession: ExamSessionCreateOneWithoutCenterExamSessionInput!
  center: CenterCreateOneWithoutCenterExamSessionInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput
}

input CenterExamSessionCreateWithoutCenterExamSessionSeriesInput {
  id: ID
  examSession: ExamSessionCreateOneWithoutCenterExamSessionInput!
  center: CenterCreateOneWithoutCenterExamSessionInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput
}

input CenterExamSessionCreateWithoutCenterInput {
  id: ID
  examSession: ExamSessionCreateOneWithoutCenterExamSessionInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput
}

input CenterExamSessionCreateWithoutExamSessionInput {
  id: ID
  center: CenterCreateOneWithoutCenterExamSessionInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput
}

input CenterExamSessionCreateWithoutRegistrationInput {
  id: ID
  examSession: ExamSessionCreateOneWithoutCenterExamSessionInput!
  center: CenterCreateOneWithoutCenterExamSessionInput!
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput
}

"""An edge in a connection."""
type CenterExamSessionEdge {
  """The item at the end of the edge."""
  node: CenterExamSession!

  """A cursor for use in pagination."""
  cursor: String!
}

type CenterExamSessionExaminer implements Node {
  id: ID!
  examiner: Examiner!
  centerExamSession: CenterExamSession!
  phaseRank: PhaseRank!
  createdAt: DateTime!
  updatedAt: DateTime!
  report(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
}

"""A connection to a list of items."""
type CenterExamSessionExaminerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterExamSessionExaminerEdge]!
  aggregate: AggregateCenterExamSessionExaminer!
}

input CenterExamSessionExaminerCreateInput {
  id: ID
  examiner: ExaminerCreateOneInput!
  centerExamSession: CenterExamSessionCreateOneWithoutCenterExamSessionExaminerInput!
  phaseRank: PhaseRankCreateOneInput!
  report: ReportCreateManyWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionExaminerCreateManyInput {
  create: [CenterExamSessionExaminerCreateInput!]
  connect: [CenterExamSessionExaminerWhereUniqueInput!]
}

input CenterExamSessionExaminerCreateManyWithoutCenterExamSessionInput {
  create: [CenterExamSessionExaminerCreateWithoutCenterExamSessionInput!]
  connect: [CenterExamSessionExaminerWhereUniqueInput!]
}

input CenterExamSessionExaminerCreateOneWithoutReportInput {
  create: CenterExamSessionExaminerCreateWithoutReportInput
  connect: CenterExamSessionExaminerWhereUniqueInput
}

input CenterExamSessionExaminerCreateWithoutCenterExamSessionInput {
  id: ID
  examiner: ExaminerCreateOneInput!
  phaseRank: PhaseRankCreateOneInput!
  report: ReportCreateManyWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionExaminerCreateWithoutReportInput {
  id: ID
  examiner: ExaminerCreateOneInput!
  centerExamSession: CenterExamSessionCreateOneWithoutCenterExamSessionExaminerInput!
  phaseRank: PhaseRankCreateOneInput!
}

"""An edge in a connection."""
type CenterExamSessionExaminerEdge {
  """The item at the end of the edge."""
  node: CenterExamSessionExaminer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CenterExamSessionExaminerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterExamSessionExaminerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterExamSessionExaminerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionExaminerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionExaminerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionExaminerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterExamSessionExaminerSubscriptionPayload {
  mutation: MutationType!
  node: CenterExamSessionExaminer
  updatedFields: [String!]
  previousValues: CenterExamSessionExaminerPreviousValues
}

input CenterExamSessionExaminerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionExaminerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionExaminerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionExaminerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterExamSessionExaminerWhereInput
}

input CenterExamSessionExaminerUpdateDataInput {
  examiner: ExaminerUpdateOneRequiredInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionExaminerInput
  phaseRank: PhaseRankUpdateOneRequiredInput
  report: ReportUpdateManyWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionExaminerUpdateInput {
  examiner: ExaminerUpdateOneRequiredInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionExaminerInput
  phaseRank: PhaseRankUpdateOneRequiredInput
  report: ReportUpdateManyWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionExaminerUpdateManyInput {
  create: [CenterExamSessionExaminerCreateInput!]
  connect: [CenterExamSessionExaminerWhereUniqueInput!]
  set: [CenterExamSessionExaminerWhereUniqueInput!]
  disconnect: [CenterExamSessionExaminerWhereUniqueInput!]
  delete: [CenterExamSessionExaminerWhereUniqueInput!]
  update: [CenterExamSessionExaminerUpdateWithWhereUniqueNestedInput!]
  deleteMany: [CenterExamSessionExaminerScalarWhereInput!]
  upsert: [CenterExamSessionExaminerUpsertWithWhereUniqueNestedInput!]
}

input CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput {
  create: [CenterExamSessionExaminerCreateWithoutCenterExamSessionInput!]
  connect: [CenterExamSessionExaminerWhereUniqueInput!]
  set: [CenterExamSessionExaminerWhereUniqueInput!]
  disconnect: [CenterExamSessionExaminerWhereUniqueInput!]
  delete: [CenterExamSessionExaminerWhereUniqueInput!]
  update: [CenterExamSessionExaminerUpdateWithWhereUniqueWithoutCenterExamSessionInput!]
  deleteMany: [CenterExamSessionExaminerScalarWhereInput!]
  upsert: [CenterExamSessionExaminerUpsertWithWhereUniqueWithoutCenterExamSessionInput!]
}

input CenterExamSessionExaminerUpdateOneRequiredWithoutReportInput {
  create: CenterExamSessionExaminerCreateWithoutReportInput
  connect: CenterExamSessionExaminerWhereUniqueInput
  update: CenterExamSessionExaminerUpdateWithoutReportDataInput
  upsert: CenterExamSessionExaminerUpsertWithoutReportInput
}

input CenterExamSessionExaminerUpdateWithoutCenterExamSessionDataInput {
  examiner: ExaminerUpdateOneRequiredInput
  phaseRank: PhaseRankUpdateOneRequiredInput
  report: ReportUpdateManyWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionExaminerUpdateWithoutReportDataInput {
  examiner: ExaminerUpdateOneRequiredInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionExaminerInput
  phaseRank: PhaseRankUpdateOneRequiredInput
}

input CenterExamSessionExaminerUpdateWithWhereUniqueNestedInput {
  where: CenterExamSessionExaminerWhereUniqueInput!
  data: CenterExamSessionExaminerUpdateDataInput!
}

input CenterExamSessionExaminerUpdateWithWhereUniqueWithoutCenterExamSessionInput {
  where: CenterExamSessionExaminerWhereUniqueInput!
  data: CenterExamSessionExaminerUpdateWithoutCenterExamSessionDataInput!
}

input CenterExamSessionExaminerUpsertWithoutReportInput {
  update: CenterExamSessionExaminerUpdateWithoutReportDataInput!
  create: CenterExamSessionExaminerCreateWithoutReportInput!
}

input CenterExamSessionExaminerUpsertWithWhereUniqueNestedInput {
  where: CenterExamSessionExaminerWhereUniqueInput!
  update: CenterExamSessionExaminerUpdateDataInput!
  create: CenterExamSessionExaminerCreateInput!
}

input CenterExamSessionExaminerUpsertWithWhereUniqueWithoutCenterExamSessionInput {
  where: CenterExamSessionExaminerWhereUniqueInput!
  update: CenterExamSessionExaminerUpdateWithoutCenterExamSessionDataInput!
  create: CenterExamSessionExaminerCreateWithoutCenterExamSessionInput!
}

input CenterExamSessionExaminerWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionExaminerWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionExaminerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionExaminerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  examiner: ExaminerWhereInput
  centerExamSession: CenterExamSessionWhereInput
  phaseRank: PhaseRankWhereInput
  report_every: ReportWhereInput
  report_some: ReportWhereInput
  report_none: ReportWhereInput
}

input CenterExamSessionExaminerWhereUniqueInput {
  id: ID
}

enum CenterExamSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterExamSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterExamSessionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterExamSessionSeries implements Node {
  id: ID!
  centerExamSession: CenterExamSession!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
  series: Series!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CenterExamSessionSeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterExamSessionSeriesEdge]!
  aggregate: AggregateCenterExamSessionSeries!
}

input CenterExamSessionSeriesCreateInput {
  id: ID
  centerExamSession: CenterExamSessionCreateOneWithoutCenterExamSessionSeriesInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionSeriesInput
  series: SeriesCreateOneWithoutCenterExamSessionSeriesInput!
}

input CenterExamSessionSeriesCreateManyWithoutCenterExamSessionInput {
  create: [CenterExamSessionSeriesCreateWithoutCenterExamSessionInput!]
  connect: [CenterExamSessionSeriesWhereUniqueInput!]
}

input CenterExamSessionSeriesCreateManyWithoutSeriesInput {
  create: [CenterExamSessionSeriesCreateWithoutSeriesInput!]
  connect: [CenterExamSessionSeriesWhereUniqueInput!]
}

input CenterExamSessionSeriesCreateOneWithoutRegistrationInput {
  create: CenterExamSessionSeriesCreateWithoutRegistrationInput
  connect: CenterExamSessionSeriesWhereUniqueInput
}

input CenterExamSessionSeriesCreateWithoutCenterExamSessionInput {
  id: ID
  registration: RegistrationCreateManyWithoutCenterExamSessionSeriesInput
  series: SeriesCreateOneWithoutCenterExamSessionSeriesInput!
}

input CenterExamSessionSeriesCreateWithoutRegistrationInput {
  id: ID
  centerExamSession: CenterExamSessionCreateOneWithoutCenterExamSessionSeriesInput!
  series: SeriesCreateOneWithoutCenterExamSessionSeriesInput!
}

input CenterExamSessionSeriesCreateWithoutSeriesInput {
  id: ID
  centerExamSession: CenterExamSessionCreateOneWithoutCenterExamSessionSeriesInput!
  registration: RegistrationCreateManyWithoutCenterExamSessionSeriesInput
}

"""An edge in a connection."""
type CenterExamSessionSeriesEdge {
  """The item at the end of the edge."""
  node: CenterExamSessionSeries!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CenterExamSessionSeriesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterExamSessionSeriesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterExamSessionSeriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionSeriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionSeriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionSeriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterExamSessionSeriesSubscriptionPayload {
  mutation: MutationType!
  node: CenterExamSessionSeries
  updatedFields: [String!]
  previousValues: CenterExamSessionSeriesPreviousValues
}

input CenterExamSessionSeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionSeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionSeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionSeriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterExamSessionSeriesWhereInput
}

input CenterExamSessionSeriesUpdateInput {
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionSeriesInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionSeriesInput
  series: SeriesUpdateOneRequiredWithoutCenterExamSessionSeriesInput
}

input CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput {
  create: [CenterExamSessionSeriesCreateWithoutCenterExamSessionInput!]
  connect: [CenterExamSessionSeriesWhereUniqueInput!]
  set: [CenterExamSessionSeriesWhereUniqueInput!]
  disconnect: [CenterExamSessionSeriesWhereUniqueInput!]
  delete: [CenterExamSessionSeriesWhereUniqueInput!]
  update: [CenterExamSessionSeriesUpdateWithWhereUniqueWithoutCenterExamSessionInput!]
  deleteMany: [CenterExamSessionSeriesScalarWhereInput!]
  upsert: [CenterExamSessionSeriesUpsertWithWhereUniqueWithoutCenterExamSessionInput!]
}

input CenterExamSessionSeriesUpdateManyWithoutSeriesInput {
  create: [CenterExamSessionSeriesCreateWithoutSeriesInput!]
  connect: [CenterExamSessionSeriesWhereUniqueInput!]
  set: [CenterExamSessionSeriesWhereUniqueInput!]
  disconnect: [CenterExamSessionSeriesWhereUniqueInput!]
  delete: [CenterExamSessionSeriesWhereUniqueInput!]
  update: [CenterExamSessionSeriesUpdateWithWhereUniqueWithoutSeriesInput!]
  deleteMany: [CenterExamSessionSeriesScalarWhereInput!]
  upsert: [CenterExamSessionSeriesUpsertWithWhereUniqueWithoutSeriesInput!]
}

input CenterExamSessionSeriesUpdateOneRequiredWithoutRegistrationInput {
  create: CenterExamSessionSeriesCreateWithoutRegistrationInput
  connect: CenterExamSessionSeriesWhereUniqueInput
  update: CenterExamSessionSeriesUpdateWithoutRegistrationDataInput
  upsert: CenterExamSessionSeriesUpsertWithoutRegistrationInput
}

input CenterExamSessionSeriesUpdateWithoutCenterExamSessionDataInput {
  registration: RegistrationUpdateManyWithoutCenterExamSessionSeriesInput
  series: SeriesUpdateOneRequiredWithoutCenterExamSessionSeriesInput
}

input CenterExamSessionSeriesUpdateWithoutRegistrationDataInput {
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionSeriesInput
  series: SeriesUpdateOneRequiredWithoutCenterExamSessionSeriesInput
}

input CenterExamSessionSeriesUpdateWithoutSeriesDataInput {
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionSeriesInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionSeriesInput
}

input CenterExamSessionSeriesUpdateWithWhereUniqueWithoutCenterExamSessionInput {
  where: CenterExamSessionSeriesWhereUniqueInput!
  data: CenterExamSessionSeriesUpdateWithoutCenterExamSessionDataInput!
}

input CenterExamSessionSeriesUpdateWithWhereUniqueWithoutSeriesInput {
  where: CenterExamSessionSeriesWhereUniqueInput!
  data: CenterExamSessionSeriesUpdateWithoutSeriesDataInput!
}

input CenterExamSessionSeriesUpsertWithoutRegistrationInput {
  update: CenterExamSessionSeriesUpdateWithoutRegistrationDataInput!
  create: CenterExamSessionSeriesCreateWithoutRegistrationInput!
}

input CenterExamSessionSeriesUpsertWithWhereUniqueWithoutCenterExamSessionInput {
  where: CenterExamSessionSeriesWhereUniqueInput!
  update: CenterExamSessionSeriesUpdateWithoutCenterExamSessionDataInput!
  create: CenterExamSessionSeriesCreateWithoutCenterExamSessionInput!
}

input CenterExamSessionSeriesUpsertWithWhereUniqueWithoutSeriesInput {
  where: CenterExamSessionSeriesWhereUniqueInput!
  update: CenterExamSessionSeriesUpdateWithoutSeriesDataInput!
  create: CenterExamSessionSeriesCreateWithoutSeriesInput!
}

input CenterExamSessionSeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionSeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionSeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionSeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerExamSession: CenterExamSessionWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
  series: SeriesWhereInput
}

input CenterExamSessionSeriesWhereUniqueInput {
  id: ID
}

type CenterExamSessionSubscriptionPayload {
  mutation: MutationType!
  node: CenterExamSession
  updatedFields: [String!]
  previousValues: CenterExamSessionPreviousValues
}

input CenterExamSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterExamSessionWhereInput
}

input CenterExamSessionUpdateInput {
  examSession: ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput
  center: CenterUpdateOneRequiredWithoutCenterExamSessionInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateManyWithoutCenterInput {
  create: [CenterExamSessionCreateWithoutCenterInput!]
  connect: [CenterExamSessionWhereUniqueInput!]
  set: [CenterExamSessionWhereUniqueInput!]
  disconnect: [CenterExamSessionWhereUniqueInput!]
  delete: [CenterExamSessionWhereUniqueInput!]
  update: [CenterExamSessionUpdateWithWhereUniqueWithoutCenterInput!]
  deleteMany: [CenterExamSessionScalarWhereInput!]
  upsert: [CenterExamSessionUpsertWithWhereUniqueWithoutCenterInput!]
}

input CenterExamSessionUpdateManyWithoutExamSessionInput {
  create: [CenterExamSessionCreateWithoutExamSessionInput!]
  connect: [CenterExamSessionWhereUniqueInput!]
  set: [CenterExamSessionWhereUniqueInput!]
  disconnect: [CenterExamSessionWhereUniqueInput!]
  delete: [CenterExamSessionWhereUniqueInput!]
  update: [CenterExamSessionUpdateWithWhereUniqueWithoutExamSessionInput!]
  deleteMany: [CenterExamSessionScalarWhereInput!]
  upsert: [CenterExamSessionUpsertWithWhereUniqueWithoutExamSessionInput!]
}

input CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionExaminerInput {
  create: CenterExamSessionCreateWithoutCenterExamSessionExaminerInput
  connect: CenterExamSessionWhereUniqueInput
  update: CenterExamSessionUpdateWithoutCenterExamSessionExaminerDataInput
  upsert: CenterExamSessionUpsertWithoutCenterExamSessionExaminerInput
}

input CenterExamSessionUpdateOneRequiredWithoutCenterExamSessionSeriesInput {
  create: CenterExamSessionCreateWithoutCenterExamSessionSeriesInput
  connect: CenterExamSessionWhereUniqueInput
  update: CenterExamSessionUpdateWithoutCenterExamSessionSeriesDataInput
  upsert: CenterExamSessionUpsertWithoutCenterExamSessionSeriesInput
}

input CenterExamSessionUpdateOneRequiredWithoutRegistrationInput {
  create: CenterExamSessionCreateWithoutRegistrationInput
  connect: CenterExamSessionWhereUniqueInput
  update: CenterExamSessionUpdateWithoutRegistrationDataInput
  upsert: CenterExamSessionUpsertWithoutRegistrationInput
}

input CenterExamSessionUpdateWithoutCenterDataInput {
  examSession: ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateWithoutCenterExamSessionExaminerDataInput {
  examSession: ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput
  center: CenterUpdateOneRequiredWithoutCenterExamSessionInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateWithoutCenterExamSessionSeriesDataInput {
  examSession: ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput
  center: CenterUpdateOneRequiredWithoutCenterExamSessionInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateWithoutExamSessionDataInput {
  center: CenterUpdateOneRequiredWithoutCenterExamSessionInput
  registration: RegistrationUpdateManyWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateWithoutRegistrationDataInput {
  examSession: ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput
  center: CenterUpdateOneRequiredWithoutCenterExamSessionInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutCenterExamSessionInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyWithoutCenterExamSessionInput
}

input CenterExamSessionUpdateWithWhereUniqueWithoutCenterInput {
  where: CenterExamSessionWhereUniqueInput!
  data: CenterExamSessionUpdateWithoutCenterDataInput!
}

input CenterExamSessionUpdateWithWhereUniqueWithoutExamSessionInput {
  where: CenterExamSessionWhereUniqueInput!
  data: CenterExamSessionUpdateWithoutExamSessionDataInput!
}

input CenterExamSessionUpsertWithoutCenterExamSessionExaminerInput {
  update: CenterExamSessionUpdateWithoutCenterExamSessionExaminerDataInput!
  create: CenterExamSessionCreateWithoutCenterExamSessionExaminerInput!
}

input CenterExamSessionUpsertWithoutCenterExamSessionSeriesInput {
  update: CenterExamSessionUpdateWithoutCenterExamSessionSeriesDataInput!
  create: CenterExamSessionCreateWithoutCenterExamSessionSeriesInput!
}

input CenterExamSessionUpsertWithoutRegistrationInput {
  update: CenterExamSessionUpdateWithoutRegistrationDataInput!
  create: CenterExamSessionCreateWithoutRegistrationInput!
}

input CenterExamSessionUpsertWithWhereUniqueWithoutCenterInput {
  where: CenterExamSessionWhereUniqueInput!
  update: CenterExamSessionUpdateWithoutCenterDataInput!
  create: CenterExamSessionCreateWithoutCenterInput!
}

input CenterExamSessionUpsertWithWhereUniqueWithoutExamSessionInput {
  where: CenterExamSessionWhereUniqueInput!
  update: CenterExamSessionUpdateWithoutExamSessionDataInput!
  create: CenterExamSessionCreateWithoutExamSessionInput!
}

input CenterExamSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterExamSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterExamSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterExamSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  examSession: ExamSessionWhereInput
  center: CenterWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
  centerExamSessionSeries_every: CenterExamSessionSeriesWhereInput
  centerExamSessionSeries_some: CenterExamSessionSeriesWhereInput
  centerExamSessionSeries_none: CenterExamSessionSeriesWhereInput
  centerExamSessionExaminer_every: CenterExamSessionExaminerWhereInput
  centerExamSessionExaminer_some: CenterExamSessionExaminerWhereInput
  centerExamSessionExaminer_none: CenterExamSessionExaminerWhereInput
}

input CenterExamSessionWhereUniqueInput {
  id: ID
}

enum CenterOrderByInput {
  id_ASC
  id_DESC
  centerName_ASC
  centerName_DESC
  centerCode_ASC
  centerCode_DESC
  centerSecretCode_ASC
  centerSecretCode_DESC
  centerNumber_ASC
  centerNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterPreviousValues {
  id: ID!
  centerName: String!
  centerCode: String!
  centerSecretCode: String!
  centerNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  centerName: String

  """All values that are not equal to given value."""
  centerName_not: String

  """All values that are contained in given list."""
  centerName_in: [String!]

  """All values that are not contained in given list."""
  centerName_not_in: [String!]

  """All values less than the given value."""
  centerName_lt: String

  """All values less than or equal the given value."""
  centerName_lte: String

  """All values greater than the given value."""
  centerName_gt: String

  """All values greater than or equal the given value."""
  centerName_gte: String

  """All values containing the given string."""
  centerName_contains: String

  """All values not containing the given string."""
  centerName_not_contains: String

  """All values starting with the given string."""
  centerName_starts_with: String

  """All values not starting with the given string."""
  centerName_not_starts_with: String

  """All values ending with the given string."""
  centerName_ends_with: String

  """All values not ending with the given string."""
  centerName_not_ends_with: String
  centerCode: String

  """All values that are not equal to given value."""
  centerCode_not: String

  """All values that are contained in given list."""
  centerCode_in: [String!]

  """All values that are not contained in given list."""
  centerCode_not_in: [String!]

  """All values less than the given value."""
  centerCode_lt: String

  """All values less than or equal the given value."""
  centerCode_lte: String

  """All values greater than the given value."""
  centerCode_gt: String

  """All values greater than or equal the given value."""
  centerCode_gte: String

  """All values containing the given string."""
  centerCode_contains: String

  """All values not containing the given string."""
  centerCode_not_contains: String

  """All values starting with the given string."""
  centerCode_starts_with: String

  """All values not starting with the given string."""
  centerCode_not_starts_with: String

  """All values ending with the given string."""
  centerCode_ends_with: String

  """All values not ending with the given string."""
  centerCode_not_ends_with: String
  centerSecretCode: String

  """All values that are not equal to given value."""
  centerSecretCode_not: String

  """All values that are contained in given list."""
  centerSecretCode_in: [String!]

  """All values that are not contained in given list."""
  centerSecretCode_not_in: [String!]

  """All values less than the given value."""
  centerSecretCode_lt: String

  """All values less than or equal the given value."""
  centerSecretCode_lte: String

  """All values greater than the given value."""
  centerSecretCode_gt: String

  """All values greater than or equal the given value."""
  centerSecretCode_gte: String

  """All values containing the given string."""
  centerSecretCode_contains: String

  """All values not containing the given string."""
  centerSecretCode_not_contains: String

  """All values starting with the given string."""
  centerSecretCode_starts_with: String

  """All values not starting with the given string."""
  centerSecretCode_not_starts_with: String

  """All values ending with the given string."""
  centerSecretCode_ends_with: String

  """All values not ending with the given string."""
  centerSecretCode_not_ends_with: String
  centerNumber: Int

  """All values that are not equal to given value."""
  centerNumber_not: Int

  """All values that are contained in given list."""
  centerNumber_in: [Int!]

  """All values that are not contained in given list."""
  centerNumber_not_in: [Int!]

  """All values less than the given value."""
  centerNumber_lt: Int

  """All values less than or equal the given value."""
  centerNumber_lte: Int

  """All values greater than the given value."""
  centerNumber_gt: Int

  """All values greater than or equal the given value."""
  centerNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterSubscriptionPayload {
  mutation: MutationType!
  node: Center
  updatedFields: [String!]
  previousValues: CenterPreviousValues
}

input CenterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterWhereInput
}

input CenterUpdateInput {
  centerName: String
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyInput
  centerExamSession: CenterExamSessionUpdateManyWithoutCenterInput
}

input CenterUpdateManyDataInput {
  centerName: String
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
}

input CenterUpdateManyMutationInput {
  centerName: String
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
}

input CenterUpdateManyWithoutTownInput {
  create: [CenterCreateWithoutTownInput!]
  connect: [CenterWhereUniqueInput!]
  set: [CenterWhereUniqueInput!]
  disconnect: [CenterWhereUniqueInput!]
  delete: [CenterWhereUniqueInput!]
  update: [CenterUpdateWithWhereUniqueWithoutTownInput!]
  updateMany: [CenterUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterScalarWhereInput!]
  upsert: [CenterUpsertWithWhereUniqueWithoutTownInput!]
}

input CenterUpdateManyWithWhereNestedInput {
  where: CenterScalarWhereInput!
  data: CenterUpdateManyDataInput!
}

input CenterUpdateOneRequiredWithoutCenterExamSessionInput {
  create: CenterCreateWithoutCenterExamSessionInput
  connect: CenterWhereUniqueInput
  update: CenterUpdateWithoutCenterExamSessionDataInput
  upsert: CenterUpsertWithoutCenterExamSessionInput
}

input CenterUpdateWithoutCenterExamSessionDataInput {
  centerName: String
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyInput
}

input CenterUpdateWithoutTownDataInput {
  centerName: String
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateManyInput
  centerExamSession: CenterExamSessionUpdateManyWithoutCenterInput
}

input CenterUpdateWithWhereUniqueWithoutTownInput {
  where: CenterWhereUniqueInput!
  data: CenterUpdateWithoutTownDataInput!
}

input CenterUpsertWithoutCenterExamSessionInput {
  update: CenterUpdateWithoutCenterExamSessionDataInput!
  create: CenterCreateWithoutCenterExamSessionInput!
}

input CenterUpsertWithWhereUniqueWithoutTownInput {
  where: CenterWhereUniqueInput!
  update: CenterUpdateWithoutTownDataInput!
  create: CenterCreateWithoutTownInput!
}

input CenterWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  centerName: String

  """All values that are not equal to given value."""
  centerName_not: String

  """All values that are contained in given list."""
  centerName_in: [String!]

  """All values that are not contained in given list."""
  centerName_not_in: [String!]

  """All values less than the given value."""
  centerName_lt: String

  """All values less than or equal the given value."""
  centerName_lte: String

  """All values greater than the given value."""
  centerName_gt: String

  """All values greater than or equal the given value."""
  centerName_gte: String

  """All values containing the given string."""
  centerName_contains: String

  """All values not containing the given string."""
  centerName_not_contains: String

  """All values starting with the given string."""
  centerName_starts_with: String

  """All values not starting with the given string."""
  centerName_not_starts_with: String

  """All values ending with the given string."""
  centerName_ends_with: String

  """All values not ending with the given string."""
  centerName_not_ends_with: String
  centerCode: String

  """All values that are not equal to given value."""
  centerCode_not: String

  """All values that are contained in given list."""
  centerCode_in: [String!]

  """All values that are not contained in given list."""
  centerCode_not_in: [String!]

  """All values less than the given value."""
  centerCode_lt: String

  """All values less than or equal the given value."""
  centerCode_lte: String

  """All values greater than the given value."""
  centerCode_gt: String

  """All values greater than or equal the given value."""
  centerCode_gte: String

  """All values containing the given string."""
  centerCode_contains: String

  """All values not containing the given string."""
  centerCode_not_contains: String

  """All values starting with the given string."""
  centerCode_starts_with: String

  """All values not starting with the given string."""
  centerCode_not_starts_with: String

  """All values ending with the given string."""
  centerCode_ends_with: String

  """All values not ending with the given string."""
  centerCode_not_ends_with: String
  centerSecretCode: String

  """All values that are not equal to given value."""
  centerSecretCode_not: String

  """All values that are contained in given list."""
  centerSecretCode_in: [String!]

  """All values that are not contained in given list."""
  centerSecretCode_not_in: [String!]

  """All values less than the given value."""
  centerSecretCode_lt: String

  """All values less than or equal the given value."""
  centerSecretCode_lte: String

  """All values greater than the given value."""
  centerSecretCode_gt: String

  """All values greater than or equal the given value."""
  centerSecretCode_gte: String

  """All values containing the given string."""
  centerSecretCode_contains: String

  """All values not containing the given string."""
  centerSecretCode_not_contains: String

  """All values starting with the given string."""
  centerSecretCode_starts_with: String

  """All values not starting with the given string."""
  centerSecretCode_not_starts_with: String

  """All values ending with the given string."""
  centerSecretCode_ends_with: String

  """All values not ending with the given string."""
  centerSecretCode_not_ends_with: String
  centerNumber: Int

  """All values that are not equal to given value."""
  centerNumber_not: Int

  """All values that are contained in given list."""
  centerNumber_in: [Int!]

  """All values that are not contained in given list."""
  centerNumber_not_in: [Int!]

  """All values less than the given value."""
  centerNumber_lt: Int

  """All values less than or equal the given value."""
  centerNumber_lte: Int

  """All values greater than the given value."""
  centerNumber_gt: Int

  """All values greater than or equal the given value."""
  centerNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  town: TownWhereInput
  centerExamSessionExaminer_every: CenterExamSessionExaminerWhereInput
  centerExamSessionExaminer_some: CenterExamSessionExaminerWhereInput
  centerExamSessionExaminer_none: CenterExamSessionExaminerWhereInput
  centerExamSession_every: CenterExamSessionWhereInput
  centerExamSession_some: CenterExamSessionWhereInput
  centerExamSession_none: CenterExamSessionWhereInput
}

input CenterWhereUniqueInput {
  id: ID
  centerCode: String
  centerSecretCode: String
  centerNumber: Int
}

type Country implements Node {
  id: ID!
  countryName: String!
  region(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region!]
  countryCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: ID
  countryName: String!
  countryCode: String!
  region: RegionCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutRegionInput {
  create: CountryCreateWithoutRegionInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutRegionInput {
  id: ID
  countryName: String!
  countryCode: String!
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  countryName_ASC
  countryName_DESC
  countryCode_ASC
  countryCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryPreviousValues {
  id: ID!
  countryName: String!
  countryCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateInput {
  countryName: String
  countryCode: String
  region: RegionUpdateManyWithoutCountryInput
}

input CountryUpdateManyMutationInput {
  countryName: String
  countryCode: String
}

input CountryUpdateOneRequiredWithoutRegionInput {
  create: CountryCreateWithoutRegionInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateWithoutRegionDataInput
  upsert: CountryUpsertWithoutRegionInput
}

input CountryUpdateWithoutRegionDataInput {
  countryName: String
  countryCode: String
}

input CountryUpsertWithoutRegionInput {
  update: CountryUpdateWithoutRegionDataInput!
  create: CountryCreateWithoutRegionInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  countryName: String

  """All values that are not equal to given value."""
  countryName_not: String

  """All values that are contained in given list."""
  countryName_in: [String!]

  """All values that are not contained in given list."""
  countryName_not_in: [String!]

  """All values less than the given value."""
  countryName_lt: String

  """All values less than or equal the given value."""
  countryName_lte: String

  """All values greater than the given value."""
  countryName_gt: String

  """All values greater than or equal the given value."""
  countryName_gte: String

  """All values containing the given string."""
  countryName_contains: String

  """All values not containing the given string."""
  countryName_not_contains: String

  """All values starting with the given string."""
  countryName_starts_with: String

  """All values not starting with the given string."""
  countryName_not_starts_with: String

  """All values ending with the given string."""
  countryName_ends_with: String

  """All values not ending with the given string."""
  countryName_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  region_every: RegionWhereInput
  region_some: RegionWhereInput
  region_none: RegionWhereInput
}

input CountryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Division implements Node {
  id: ID!
  divName: String!
  divCode: String!
  region: Region!
  subDivision(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubDivision!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DivisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DivisionEdge]!
  aggregate: AggregateDivision!
}

input DivisionCreateInput {
  id: ID
  divName: String!
  divCode: String!
  region: RegionCreateOneWithoutDivisionInput!
  subDivision: SubDivisionCreateManyWithoutDivisionInput
}

input DivisionCreateManyWithoutRegionInput {
  create: [DivisionCreateWithoutRegionInput!]
  connect: [DivisionWhereUniqueInput!]
}

input DivisionCreateOneWithoutSubDivisionInput {
  create: DivisionCreateWithoutSubDivisionInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateWithoutRegionInput {
  id: ID
  divName: String!
  divCode: String!
  subDivision: SubDivisionCreateManyWithoutDivisionInput
}

input DivisionCreateWithoutSubDivisionInput {
  id: ID
  divName: String!
  divCode: String!
  region: RegionCreateOneWithoutDivisionInput!
}

"""An edge in a connection."""
type DivisionEdge {
  """The item at the end of the edge."""
  node: Division!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DivisionOrderByInput {
  id_ASC
  id_DESC
  divName_ASC
  divName_DESC
  divCode_ASC
  divCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DivisionPreviousValues {
  id: ID!
  divName: String!
  divCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DivisionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  divName: String

  """All values that are not equal to given value."""
  divName_not: String

  """All values that are contained in given list."""
  divName_in: [String!]

  """All values that are not contained in given list."""
  divName_not_in: [String!]

  """All values less than the given value."""
  divName_lt: String

  """All values less than or equal the given value."""
  divName_lte: String

  """All values greater than the given value."""
  divName_gt: String

  """All values greater than or equal the given value."""
  divName_gte: String

  """All values containing the given string."""
  divName_contains: String

  """All values not containing the given string."""
  divName_not_contains: String

  """All values starting with the given string."""
  divName_starts_with: String

  """All values not starting with the given string."""
  divName_not_starts_with: String

  """All values ending with the given string."""
  divName_ends_with: String

  """All values not ending with the given string."""
  divName_not_ends_with: String
  divCode: String

  """All values that are not equal to given value."""
  divCode_not: String

  """All values that are contained in given list."""
  divCode_in: [String!]

  """All values that are not contained in given list."""
  divCode_not_in: [String!]

  """All values less than the given value."""
  divCode_lt: String

  """All values less than or equal the given value."""
  divCode_lte: String

  """All values greater than the given value."""
  divCode_gt: String

  """All values greater than or equal the given value."""
  divCode_gte: String

  """All values containing the given string."""
  divCode_contains: String

  """All values not containing the given string."""
  divCode_not_contains: String

  """All values starting with the given string."""
  divCode_starts_with: String

  """All values not starting with the given string."""
  divCode_not_starts_with: String

  """All values ending with the given string."""
  divCode_ends_with: String

  """All values not ending with the given string."""
  divCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DivisionSubscriptionPayload {
  mutation: MutationType!
  node: Division
  updatedFields: [String!]
  previousValues: DivisionPreviousValues
}

input DivisionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DivisionWhereInput
}

input DivisionUpdateInput {
  divName: String
  divCode: String
  region: RegionUpdateOneRequiredWithoutDivisionInput
  subDivision: SubDivisionUpdateManyWithoutDivisionInput
}

input DivisionUpdateManyDataInput {
  divName: String
  divCode: String
}

input DivisionUpdateManyMutationInput {
  divName: String
  divCode: String
}

input DivisionUpdateManyWithoutRegionInput {
  create: [DivisionCreateWithoutRegionInput!]
  connect: [DivisionWhereUniqueInput!]
  set: [DivisionWhereUniqueInput!]
  disconnect: [DivisionWhereUniqueInput!]
  delete: [DivisionWhereUniqueInput!]
  update: [DivisionUpdateWithWhereUniqueWithoutRegionInput!]
  updateMany: [DivisionUpdateManyWithWhereNestedInput!]
  deleteMany: [DivisionScalarWhereInput!]
  upsert: [DivisionUpsertWithWhereUniqueWithoutRegionInput!]
}

input DivisionUpdateManyWithWhereNestedInput {
  where: DivisionScalarWhereInput!
  data: DivisionUpdateManyDataInput!
}

input DivisionUpdateOneRequiredWithoutSubDivisionInput {
  create: DivisionCreateWithoutSubDivisionInput
  connect: DivisionWhereUniqueInput
  update: DivisionUpdateWithoutSubDivisionDataInput
  upsert: DivisionUpsertWithoutSubDivisionInput
}

input DivisionUpdateWithoutRegionDataInput {
  divName: String
  divCode: String
  subDivision: SubDivisionUpdateManyWithoutDivisionInput
}

input DivisionUpdateWithoutSubDivisionDataInput {
  divName: String
  divCode: String
  region: RegionUpdateOneRequiredWithoutDivisionInput
}

input DivisionUpdateWithWhereUniqueWithoutRegionInput {
  where: DivisionWhereUniqueInput!
  data: DivisionUpdateWithoutRegionDataInput!
}

input DivisionUpsertWithoutSubDivisionInput {
  update: DivisionUpdateWithoutSubDivisionDataInput!
  create: DivisionCreateWithoutSubDivisionInput!
}

input DivisionUpsertWithWhereUniqueWithoutRegionInput {
  where: DivisionWhereUniqueInput!
  update: DivisionUpdateWithoutRegionDataInput!
  create: DivisionCreateWithoutRegionInput!
}

input DivisionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  divName: String

  """All values that are not equal to given value."""
  divName_not: String

  """All values that are contained in given list."""
  divName_in: [String!]

  """All values that are not contained in given list."""
  divName_not_in: [String!]

  """All values less than the given value."""
  divName_lt: String

  """All values less than or equal the given value."""
  divName_lte: String

  """All values greater than the given value."""
  divName_gt: String

  """All values greater than or equal the given value."""
  divName_gte: String

  """All values containing the given string."""
  divName_contains: String

  """All values not containing the given string."""
  divName_not_contains: String

  """All values starting with the given string."""
  divName_starts_with: String

  """All values not starting with the given string."""
  divName_not_starts_with: String

  """All values ending with the given string."""
  divName_ends_with: String

  """All values not ending with the given string."""
  divName_not_ends_with: String
  divCode: String

  """All values that are not equal to given value."""
  divCode_not: String

  """All values that are contained in given list."""
  divCode_in: [String!]

  """All values that are not contained in given list."""
  divCode_not_in: [String!]

  """All values less than the given value."""
  divCode_lt: String

  """All values less than or equal the given value."""
  divCode_lte: String

  """All values greater than the given value."""
  divCode_gt: String

  """All values greater than or equal the given value."""
  divCode_gte: String

  """All values containing the given string."""
  divCode_contains: String

  """All values not containing the given string."""
  divCode_not_contains: String

  """All values starting with the given string."""
  divCode_starts_with: String

  """All values not starting with the given string."""
  divCode_not_starts_with: String

  """All values ending with the given string."""
  divCode_ends_with: String

  """All values not ending with the given string."""
  divCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  region: RegionWhereInput
  subDivision_every: SubDivisionWhereInput
  subDivision_some: SubDivisionWhereInput
  subDivision_none: SubDivisionWhereInput
}

input DivisionWhereUniqueInput {
  id: ID
  divCode: String
}

type EducationType implements Node {
  id: ID!
  subject(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  educationTypeName: String
  educationTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  series(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Series!]
}

"""A connection to a list of items."""
type EducationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EducationTypeEdge]!
  aggregate: AggregateEducationType!
}

input EducationTypeCreateInput {
  id: ID
  educationTypeName: String
  educationTypeCode: String!
  subject: SubjectCreateManyWithoutEducTypeInput
  series: SeriesCreateManyWithoutEducationTypeInput
}

input EducationTypeCreateOneWithoutSeriesInput {
  create: EducationTypeCreateWithoutSeriesInput
  connect: EducationTypeWhereUniqueInput
}

input EducationTypeCreateOneWithoutSubjectInput {
  create: EducationTypeCreateWithoutSubjectInput
  connect: EducationTypeWhereUniqueInput
}

input EducationTypeCreateWithoutSeriesInput {
  id: ID
  educationTypeName: String
  educationTypeCode: String!
  subject: SubjectCreateManyWithoutEducTypeInput
}

input EducationTypeCreateWithoutSubjectInput {
  id: ID
  educationTypeName: String
  educationTypeCode: String!
  series: SeriesCreateManyWithoutEducationTypeInput
}

"""An edge in a connection."""
type EducationTypeEdge {
  """The item at the end of the edge."""
  node: EducationType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EducationTypeOrderByInput {
  id_ASC
  id_DESC
  educationTypeName_ASC
  educationTypeName_DESC
  educationTypeCode_ASC
  educationTypeCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EducationTypePreviousValues {
  id: ID!
  educationTypeName: String
  educationTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EducationTypeSubscriptionPayload {
  mutation: MutationType!
  node: EducationType
  updatedFields: [String!]
  previousValues: EducationTypePreviousValues
}

input EducationTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EducationTypeWhereInput
}

input EducationTypeUpdateInput {
  educationTypeName: String
  educationTypeCode: String
  subject: SubjectUpdateManyWithoutEducTypeInput
  series: SeriesUpdateManyWithoutEducationTypeInput
}

input EducationTypeUpdateManyMutationInput {
  educationTypeName: String
  educationTypeCode: String
}

input EducationTypeUpdateOneRequiredWithoutSeriesInput {
  create: EducationTypeCreateWithoutSeriesInput
  connect: EducationTypeWhereUniqueInput
  update: EducationTypeUpdateWithoutSeriesDataInput
  upsert: EducationTypeUpsertWithoutSeriesInput
}

input EducationTypeUpdateOneRequiredWithoutSubjectInput {
  create: EducationTypeCreateWithoutSubjectInput
  connect: EducationTypeWhereUniqueInput
  update: EducationTypeUpdateWithoutSubjectDataInput
  upsert: EducationTypeUpsertWithoutSubjectInput
}

input EducationTypeUpdateWithoutSeriesDataInput {
  educationTypeName: String
  educationTypeCode: String
  subject: SubjectUpdateManyWithoutEducTypeInput
}

input EducationTypeUpdateWithoutSubjectDataInput {
  educationTypeName: String
  educationTypeCode: String
  series: SeriesUpdateManyWithoutEducationTypeInput
}

input EducationTypeUpsertWithoutSeriesInput {
  update: EducationTypeUpdateWithoutSeriesDataInput!
  create: EducationTypeCreateWithoutSeriesInput!
}

input EducationTypeUpsertWithoutSubjectInput {
  update: EducationTypeUpdateWithoutSubjectDataInput!
  create: EducationTypeCreateWithoutSubjectInput!
}

input EducationTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  educationTypeName: String

  """All values that are not equal to given value."""
  educationTypeName_not: String

  """All values that are contained in given list."""
  educationTypeName_in: [String!]

  """All values that are not contained in given list."""
  educationTypeName_not_in: [String!]

  """All values less than the given value."""
  educationTypeName_lt: String

  """All values less than or equal the given value."""
  educationTypeName_lte: String

  """All values greater than the given value."""
  educationTypeName_gt: String

  """All values greater than or equal the given value."""
  educationTypeName_gte: String

  """All values containing the given string."""
  educationTypeName_contains: String

  """All values not containing the given string."""
  educationTypeName_not_contains: String

  """All values starting with the given string."""
  educationTypeName_starts_with: String

  """All values not starting with the given string."""
  educationTypeName_not_starts_with: String

  """All values ending with the given string."""
  educationTypeName_ends_with: String

  """All values not ending with the given string."""
  educationTypeName_not_ends_with: String
  educationTypeCode: String

  """All values that are not equal to given value."""
  educationTypeCode_not: String

  """All values that are contained in given list."""
  educationTypeCode_in: [String!]

  """All values that are not contained in given list."""
  educationTypeCode_not_in: [String!]

  """All values less than the given value."""
  educationTypeCode_lt: String

  """All values less than or equal the given value."""
  educationTypeCode_lte: String

  """All values greater than the given value."""
  educationTypeCode_gt: String

  """All values greater than or equal the given value."""
  educationTypeCode_gte: String

  """All values containing the given string."""
  educationTypeCode_contains: String

  """All values not containing the given string."""
  educationTypeCode_not_contains: String

  """All values starting with the given string."""
  educationTypeCode_starts_with: String

  """All values not starting with the given string."""
  educationTypeCode_not_starts_with: String

  """All values ending with the given string."""
  educationTypeCode_ends_with: String

  """All values not ending with the given string."""
  educationTypeCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  subject_every: SubjectWhereInput
  subject_some: SubjectWhereInput
  subject_none: SubjectWhereInput
  series_every: SeriesWhereInput
  series_some: SeriesWhereInput
  series_none: SeriesWhereInput
}

input EducationTypeWhereUniqueInput {
  id: ID
  educationTypeCode: String
}

type Exam implements Node {
  id: ID!
  examName: String!
  examSession(where: ExamSessionWhereInput, orderBy: ExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExamSession!]
  examCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ExamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExamEdge]!
  aggregate: AggregateExam!
}

input ExamCreateInput {
  id: ID
  examName: String!
  examCode: String!
  examSession: ExamSessionCreateManyWithoutExamInput
}

input ExamCreateOneWithoutExamSessionInput {
  create: ExamCreateWithoutExamSessionInput
  connect: ExamWhereUniqueInput
}

input ExamCreateWithoutExamSessionInput {
  id: ID
  examName: String!
  examCode: String!
}

"""An edge in a connection."""
type ExamEdge {
  """The item at the end of the edge."""
  node: Exam!

  """A cursor for use in pagination."""
  cursor: String!
}

type Examiner implements Node {
  id: ID!
  examiner1stName: String!
  examiner2ndName: String!
  examinerOtherNames: String!
  examinerCNI: String!
  examinerPhone: Int!
  examinerMatricule: String!
  examinerEmail: String!
  examinerImage: String!
  gender: Gender!
  examinerCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ExaminerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExaminerEdge]!
  aggregate: AggregateExaminer!
}

input ExaminerCreateInput {
  id: ID
  examiner1stName: String!
  examiner2ndName: String!
  examinerOtherNames: String!
  examinerCNI: String!
  examinerPhone: Int!
  examinerMatricule: String!
  examinerEmail: String!
  examinerImage: String!
  examinerCode: String!
  gender: GenderCreateOneInput!
}

input ExaminerCreateOneInput {
  create: ExaminerCreateInput
  connect: ExaminerWhereUniqueInput
}

"""An edge in a connection."""
type ExaminerEdge {
  """The item at the end of the edge."""
  node: Examiner!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExaminerOrderByInput {
  id_ASC
  id_DESC
  examiner1stName_ASC
  examiner1stName_DESC
  examiner2ndName_ASC
  examiner2ndName_DESC
  examinerOtherNames_ASC
  examinerOtherNames_DESC
  examinerCNI_ASC
  examinerCNI_DESC
  examinerPhone_ASC
  examinerPhone_DESC
  examinerMatricule_ASC
  examinerMatricule_DESC
  examinerEmail_ASC
  examinerEmail_DESC
  examinerImage_ASC
  examinerImage_DESC
  examinerCode_ASC
  examinerCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExaminerPreviousValues {
  id: ID!
  examiner1stName: String!
  examiner2ndName: String!
  examinerOtherNames: String!
  examinerCNI: String!
  examinerPhone: Int!
  examinerMatricule: String!
  examinerEmail: String!
  examinerImage: String!
  examinerCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExaminerSubscriptionPayload {
  mutation: MutationType!
  node: Examiner
  updatedFields: [String!]
  previousValues: ExaminerPreviousValues
}

input ExaminerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExaminerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExaminerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExaminerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExaminerWhereInput
}

input ExaminerUpdateDataInput {
  examiner1stName: String
  examiner2ndName: String
  examinerOtherNames: String
  examinerCNI: String
  examinerPhone: Int
  examinerMatricule: String
  examinerEmail: String
  examinerImage: String
  examinerCode: String
  gender: GenderUpdateOneRequiredInput
}

input ExaminerUpdateInput {
  examiner1stName: String
  examiner2ndName: String
  examinerOtherNames: String
  examinerCNI: String
  examinerPhone: Int
  examinerMatricule: String
  examinerEmail: String
  examinerImage: String
  examinerCode: String
  gender: GenderUpdateOneRequiredInput
}

input ExaminerUpdateManyMutationInput {
  examiner1stName: String
  examiner2ndName: String
  examinerOtherNames: String
  examinerCNI: String
  examinerPhone: Int
  examinerMatricule: String
  examinerEmail: String
  examinerImage: String
  examinerCode: String
}

input ExaminerUpdateOneRequiredInput {
  create: ExaminerCreateInput
  connect: ExaminerWhereUniqueInput
  update: ExaminerUpdateDataInput
  upsert: ExaminerUpsertNestedInput
}

input ExaminerUpsertNestedInput {
  update: ExaminerUpdateDataInput!
  create: ExaminerCreateInput!
}

input ExaminerWhereInput {
  """Logical AND on all given filters."""
  AND: [ExaminerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExaminerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExaminerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  examiner1stName: String

  """All values that are not equal to given value."""
  examiner1stName_not: String

  """All values that are contained in given list."""
  examiner1stName_in: [String!]

  """All values that are not contained in given list."""
  examiner1stName_not_in: [String!]

  """All values less than the given value."""
  examiner1stName_lt: String

  """All values less than or equal the given value."""
  examiner1stName_lte: String

  """All values greater than the given value."""
  examiner1stName_gt: String

  """All values greater than or equal the given value."""
  examiner1stName_gte: String

  """All values containing the given string."""
  examiner1stName_contains: String

  """All values not containing the given string."""
  examiner1stName_not_contains: String

  """All values starting with the given string."""
  examiner1stName_starts_with: String

  """All values not starting with the given string."""
  examiner1stName_not_starts_with: String

  """All values ending with the given string."""
  examiner1stName_ends_with: String

  """All values not ending with the given string."""
  examiner1stName_not_ends_with: String
  examiner2ndName: String

  """All values that are not equal to given value."""
  examiner2ndName_not: String

  """All values that are contained in given list."""
  examiner2ndName_in: [String!]

  """All values that are not contained in given list."""
  examiner2ndName_not_in: [String!]

  """All values less than the given value."""
  examiner2ndName_lt: String

  """All values less than or equal the given value."""
  examiner2ndName_lte: String

  """All values greater than the given value."""
  examiner2ndName_gt: String

  """All values greater than or equal the given value."""
  examiner2ndName_gte: String

  """All values containing the given string."""
  examiner2ndName_contains: String

  """All values not containing the given string."""
  examiner2ndName_not_contains: String

  """All values starting with the given string."""
  examiner2ndName_starts_with: String

  """All values not starting with the given string."""
  examiner2ndName_not_starts_with: String

  """All values ending with the given string."""
  examiner2ndName_ends_with: String

  """All values not ending with the given string."""
  examiner2ndName_not_ends_with: String
  examinerOtherNames: String

  """All values that are not equal to given value."""
  examinerOtherNames_not: String

  """All values that are contained in given list."""
  examinerOtherNames_in: [String!]

  """All values that are not contained in given list."""
  examinerOtherNames_not_in: [String!]

  """All values less than the given value."""
  examinerOtherNames_lt: String

  """All values less than or equal the given value."""
  examinerOtherNames_lte: String

  """All values greater than the given value."""
  examinerOtherNames_gt: String

  """All values greater than or equal the given value."""
  examinerOtherNames_gte: String

  """All values containing the given string."""
  examinerOtherNames_contains: String

  """All values not containing the given string."""
  examinerOtherNames_not_contains: String

  """All values starting with the given string."""
  examinerOtherNames_starts_with: String

  """All values not starting with the given string."""
  examinerOtherNames_not_starts_with: String

  """All values ending with the given string."""
  examinerOtherNames_ends_with: String

  """All values not ending with the given string."""
  examinerOtherNames_not_ends_with: String
  examinerCNI: String

  """All values that are not equal to given value."""
  examinerCNI_not: String

  """All values that are contained in given list."""
  examinerCNI_in: [String!]

  """All values that are not contained in given list."""
  examinerCNI_not_in: [String!]

  """All values less than the given value."""
  examinerCNI_lt: String

  """All values less than or equal the given value."""
  examinerCNI_lte: String

  """All values greater than the given value."""
  examinerCNI_gt: String

  """All values greater than or equal the given value."""
  examinerCNI_gte: String

  """All values containing the given string."""
  examinerCNI_contains: String

  """All values not containing the given string."""
  examinerCNI_not_contains: String

  """All values starting with the given string."""
  examinerCNI_starts_with: String

  """All values not starting with the given string."""
  examinerCNI_not_starts_with: String

  """All values ending with the given string."""
  examinerCNI_ends_with: String

  """All values not ending with the given string."""
  examinerCNI_not_ends_with: String
  examinerPhone: Int

  """All values that are not equal to given value."""
  examinerPhone_not: Int

  """All values that are contained in given list."""
  examinerPhone_in: [Int!]

  """All values that are not contained in given list."""
  examinerPhone_not_in: [Int!]

  """All values less than the given value."""
  examinerPhone_lt: Int

  """All values less than or equal the given value."""
  examinerPhone_lte: Int

  """All values greater than the given value."""
  examinerPhone_gt: Int

  """All values greater than or equal the given value."""
  examinerPhone_gte: Int
  examinerMatricule: String

  """All values that are not equal to given value."""
  examinerMatricule_not: String

  """All values that are contained in given list."""
  examinerMatricule_in: [String!]

  """All values that are not contained in given list."""
  examinerMatricule_not_in: [String!]

  """All values less than the given value."""
  examinerMatricule_lt: String

  """All values less than or equal the given value."""
  examinerMatricule_lte: String

  """All values greater than the given value."""
  examinerMatricule_gt: String

  """All values greater than or equal the given value."""
  examinerMatricule_gte: String

  """All values containing the given string."""
  examinerMatricule_contains: String

  """All values not containing the given string."""
  examinerMatricule_not_contains: String

  """All values starting with the given string."""
  examinerMatricule_starts_with: String

  """All values not starting with the given string."""
  examinerMatricule_not_starts_with: String

  """All values ending with the given string."""
  examinerMatricule_ends_with: String

  """All values not ending with the given string."""
  examinerMatricule_not_ends_with: String
  examinerEmail: String

  """All values that are not equal to given value."""
  examinerEmail_not: String

  """All values that are contained in given list."""
  examinerEmail_in: [String!]

  """All values that are not contained in given list."""
  examinerEmail_not_in: [String!]

  """All values less than the given value."""
  examinerEmail_lt: String

  """All values less than or equal the given value."""
  examinerEmail_lte: String

  """All values greater than the given value."""
  examinerEmail_gt: String

  """All values greater than or equal the given value."""
  examinerEmail_gte: String

  """All values containing the given string."""
  examinerEmail_contains: String

  """All values not containing the given string."""
  examinerEmail_not_contains: String

  """All values starting with the given string."""
  examinerEmail_starts_with: String

  """All values not starting with the given string."""
  examinerEmail_not_starts_with: String

  """All values ending with the given string."""
  examinerEmail_ends_with: String

  """All values not ending with the given string."""
  examinerEmail_not_ends_with: String
  examinerImage: String

  """All values that are not equal to given value."""
  examinerImage_not: String

  """All values that are contained in given list."""
  examinerImage_in: [String!]

  """All values that are not contained in given list."""
  examinerImage_not_in: [String!]

  """All values less than the given value."""
  examinerImage_lt: String

  """All values less than or equal the given value."""
  examinerImage_lte: String

  """All values greater than the given value."""
  examinerImage_gt: String

  """All values greater than or equal the given value."""
  examinerImage_gte: String

  """All values containing the given string."""
  examinerImage_contains: String

  """All values not containing the given string."""
  examinerImage_not_contains: String

  """All values starting with the given string."""
  examinerImage_starts_with: String

  """All values not starting with the given string."""
  examinerImage_not_starts_with: String

  """All values ending with the given string."""
  examinerImage_ends_with: String

  """All values not ending with the given string."""
  examinerImage_not_ends_with: String
  examinerCode: String

  """All values that are not equal to given value."""
  examinerCode_not: String

  """All values that are contained in given list."""
  examinerCode_in: [String!]

  """All values that are not contained in given list."""
  examinerCode_not_in: [String!]

  """All values less than the given value."""
  examinerCode_lt: String

  """All values less than or equal the given value."""
  examinerCode_lte: String

  """All values greater than the given value."""
  examinerCode_gt: String

  """All values greater than or equal the given value."""
  examinerCode_gte: String

  """All values containing the given string."""
  examinerCode_contains: String

  """All values not containing the given string."""
  examinerCode_not_contains: String

  """All values starting with the given string."""
  examinerCode_starts_with: String

  """All values not starting with the given string."""
  examinerCode_not_starts_with: String

  """All values ending with the given string."""
  examinerCode_ends_with: String

  """All values not ending with the given string."""
  examinerCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  gender: GenderWhereInput
}

input ExaminerWhereUniqueInput {
  id: ID
  examinerCode: String
}

enum ExamOrderByInput {
  id_ASC
  id_DESC
  examName_ASC
  examName_DESC
  examCode_ASC
  examCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExamPreviousValues {
  id: ID!
  examName: String!
  examCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExamSession implements Node {
  id: ID!
  exam: Exam!
  session: Session!
  centerExamSession(where: CenterExamSessionWhereInput, orderBy: CenterExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSession!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ExamSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExamSessionEdge]!
  aggregate: AggregateExamSession!
}

input ExamSessionCreateInput {
  id: ID
  exam: ExamCreateOneWithoutExamSessionInput!
  session: SessionCreateOneWithoutExamSessionInput!
  centerExamSession: CenterExamSessionCreateManyWithoutExamSessionInput
}

input ExamSessionCreateManyWithoutExamInput {
  create: [ExamSessionCreateWithoutExamInput!]
  connect: [ExamSessionWhereUniqueInput!]
}

input ExamSessionCreateManyWithoutSessionInput {
  create: [ExamSessionCreateWithoutSessionInput!]
  connect: [ExamSessionWhereUniqueInput!]
}

input ExamSessionCreateOneWithoutCenterExamSessionInput {
  create: ExamSessionCreateWithoutCenterExamSessionInput
  connect: ExamSessionWhereUniqueInput
}

input ExamSessionCreateWithoutCenterExamSessionInput {
  id: ID
  exam: ExamCreateOneWithoutExamSessionInput!
  session: SessionCreateOneWithoutExamSessionInput!
}

input ExamSessionCreateWithoutExamInput {
  id: ID
  session: SessionCreateOneWithoutExamSessionInput!
  centerExamSession: CenterExamSessionCreateManyWithoutExamSessionInput
}

input ExamSessionCreateWithoutSessionInput {
  id: ID
  exam: ExamCreateOneWithoutExamSessionInput!
  centerExamSession: CenterExamSessionCreateManyWithoutExamSessionInput
}

"""An edge in a connection."""
type ExamSessionEdge {
  """The item at the end of the edge."""
  node: ExamSession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExamSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExamSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ExamSessionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSessionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSessionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSessionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ExamSessionSubscriptionPayload {
  mutation: MutationType!
  node: ExamSession
  updatedFields: [String!]
  previousValues: ExamSessionPreviousValues
}

input ExamSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExamSessionWhereInput
}

input ExamSessionUpdateInput {
  exam: ExamUpdateOneRequiredWithoutExamSessionInput
  session: SessionUpdateOneRequiredWithoutExamSessionInput
  centerExamSession: CenterExamSessionUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateManyWithoutExamInput {
  create: [ExamSessionCreateWithoutExamInput!]
  connect: [ExamSessionWhereUniqueInput!]
  set: [ExamSessionWhereUniqueInput!]
  disconnect: [ExamSessionWhereUniqueInput!]
  delete: [ExamSessionWhereUniqueInput!]
  update: [ExamSessionUpdateWithWhereUniqueWithoutExamInput!]
  deleteMany: [ExamSessionScalarWhereInput!]
  upsert: [ExamSessionUpsertWithWhereUniqueWithoutExamInput!]
}

input ExamSessionUpdateManyWithoutSessionInput {
  create: [ExamSessionCreateWithoutSessionInput!]
  connect: [ExamSessionWhereUniqueInput!]
  set: [ExamSessionWhereUniqueInput!]
  disconnect: [ExamSessionWhereUniqueInput!]
  delete: [ExamSessionWhereUniqueInput!]
  update: [ExamSessionUpdateWithWhereUniqueWithoutSessionInput!]
  deleteMany: [ExamSessionScalarWhereInput!]
  upsert: [ExamSessionUpsertWithWhereUniqueWithoutSessionInput!]
}

input ExamSessionUpdateOneRequiredWithoutCenterExamSessionInput {
  create: ExamSessionCreateWithoutCenterExamSessionInput
  connect: ExamSessionWhereUniqueInput
  update: ExamSessionUpdateWithoutCenterExamSessionDataInput
  upsert: ExamSessionUpsertWithoutCenterExamSessionInput
}

input ExamSessionUpdateWithoutCenterExamSessionDataInput {
  exam: ExamUpdateOneRequiredWithoutExamSessionInput
  session: SessionUpdateOneRequiredWithoutExamSessionInput
}

input ExamSessionUpdateWithoutExamDataInput {
  session: SessionUpdateOneRequiredWithoutExamSessionInput
  centerExamSession: CenterExamSessionUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateWithoutSessionDataInput {
  exam: ExamUpdateOneRequiredWithoutExamSessionInput
  centerExamSession: CenterExamSessionUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateWithWhereUniqueWithoutExamInput {
  where: ExamSessionWhereUniqueInput!
  data: ExamSessionUpdateWithoutExamDataInput!
}

input ExamSessionUpdateWithWhereUniqueWithoutSessionInput {
  where: ExamSessionWhereUniqueInput!
  data: ExamSessionUpdateWithoutSessionDataInput!
}

input ExamSessionUpsertWithoutCenterExamSessionInput {
  update: ExamSessionUpdateWithoutCenterExamSessionDataInput!
  create: ExamSessionCreateWithoutCenterExamSessionInput!
}

input ExamSessionUpsertWithWhereUniqueWithoutExamInput {
  where: ExamSessionWhereUniqueInput!
  update: ExamSessionUpdateWithoutExamDataInput!
  create: ExamSessionCreateWithoutExamInput!
}

input ExamSessionUpsertWithWhereUniqueWithoutSessionInput {
  where: ExamSessionWhereUniqueInput!
  update: ExamSessionUpdateWithoutSessionDataInput!
  create: ExamSessionCreateWithoutSessionInput!
}

input ExamSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  exam: ExamWhereInput
  session: SessionWhereInput
  centerExamSession_every: CenterExamSessionWhereInput
  centerExamSession_some: CenterExamSessionWhereInput
  centerExamSession_none: CenterExamSessionWhereInput
}

input ExamSessionWhereUniqueInput {
  id: ID
}

type ExamSubscriptionPayload {
  mutation: MutationType!
  node: Exam
  updatedFields: [String!]
  previousValues: ExamPreviousValues
}

input ExamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExamWhereInput
}

input ExamUpdateInput {
  examName: String
  examCode: String
  examSession: ExamSessionUpdateManyWithoutExamInput
}

input ExamUpdateManyMutationInput {
  examName: String
  examCode: String
}

input ExamUpdateOneRequiredWithoutExamSessionInput {
  create: ExamCreateWithoutExamSessionInput
  connect: ExamWhereUniqueInput
  update: ExamUpdateWithoutExamSessionDataInput
  upsert: ExamUpsertWithoutExamSessionInput
}

input ExamUpdateWithoutExamSessionDataInput {
  examName: String
  examCode: String
}

input ExamUpsertWithoutExamSessionInput {
  update: ExamUpdateWithoutExamSessionDataInput!
  create: ExamCreateWithoutExamSessionInput!
}

input ExamWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  examName: String

  """All values that are not equal to given value."""
  examName_not: String

  """All values that are contained in given list."""
  examName_in: [String!]

  """All values that are not contained in given list."""
  examName_not_in: [String!]

  """All values less than the given value."""
  examName_lt: String

  """All values less than or equal the given value."""
  examName_lte: String

  """All values greater than the given value."""
  examName_gt: String

  """All values greater than or equal the given value."""
  examName_gte: String

  """All values containing the given string."""
  examName_contains: String

  """All values not containing the given string."""
  examName_not_contains: String

  """All values starting with the given string."""
  examName_starts_with: String

  """All values not starting with the given string."""
  examName_not_starts_with: String

  """All values ending with the given string."""
  examName_ends_with: String

  """All values not ending with the given string."""
  examName_not_ends_with: String
  examCode: String

  """All values that are not equal to given value."""
  examCode_not: String

  """All values that are contained in given list."""
  examCode_in: [String!]

  """All values that are not contained in given list."""
  examCode_not_in: [String!]

  """All values less than the given value."""
  examCode_lt: String

  """All values less than or equal the given value."""
  examCode_lte: String

  """All values greater than the given value."""
  examCode_gt: String

  """All values greater than or equal the given value."""
  examCode_gte: String

  """All values containing the given string."""
  examCode_contains: String

  """All values not containing the given string."""
  examCode_not_contains: String

  """All values starting with the given string."""
  examCode_starts_with: String

  """All values not starting with the given string."""
  examCode_not_starts_with: String

  """All values ending with the given string."""
  examCode_ends_with: String

  """All values not ending with the given string."""
  examCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  examSession_every: ExamSessionWhereInput
  examSession_some: ExamSessionWhereInput
  examSession_none: ExamSessionWhereInput
}

input ExamWhereUniqueInput {
  id: ID
  examCode: String
}

type Gender implements Node {
  id: ID!
  genderName: String!
  genderCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  candidate(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate!]
}

"""A connection to a list of items."""
type GenderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GenderEdge]!
  aggregate: AggregateGender!
}

input GenderCreateInput {
  id: ID
  genderName: String!
  genderCode: String!
  candidate: CandidateCreateManyWithoutGenderInput
}

input GenderCreateOneInput {
  create: GenderCreateInput
  connect: GenderWhereUniqueInput
}

input GenderCreateOneWithoutCandidateInput {
  create: GenderCreateWithoutCandidateInput
  connect: GenderWhereUniqueInput
}

input GenderCreateWithoutCandidateInput {
  id: ID
  genderName: String!
  genderCode: String!
}

"""An edge in a connection."""
type GenderEdge {
  """The item at the end of the edge."""
  node: Gender!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GenderOrderByInput {
  id_ASC
  id_DESC
  genderName_ASC
  genderName_DESC
  genderCode_ASC
  genderCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GenderPreviousValues {
  id: ID!
  genderName: String!
  genderCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GenderSubscriptionPayload {
  mutation: MutationType!
  node: Gender
  updatedFields: [String!]
  previousValues: GenderPreviousValues
}

input GenderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GenderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GenderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GenderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GenderWhereInput
}

input GenderUpdateDataInput {
  genderName: String
  genderCode: String
  candidate: CandidateUpdateManyWithoutGenderInput
}

input GenderUpdateInput {
  genderName: String
  genderCode: String
  candidate: CandidateUpdateManyWithoutGenderInput
}

input GenderUpdateManyMutationInput {
  genderName: String
  genderCode: String
}

input GenderUpdateOneRequiredInput {
  create: GenderCreateInput
  connect: GenderWhereUniqueInput
  update: GenderUpdateDataInput
  upsert: GenderUpsertNestedInput
}

input GenderUpdateOneRequiredWithoutCandidateInput {
  create: GenderCreateWithoutCandidateInput
  connect: GenderWhereUniqueInput
  update: GenderUpdateWithoutCandidateDataInput
  upsert: GenderUpsertWithoutCandidateInput
}

input GenderUpdateWithoutCandidateDataInput {
  genderName: String
  genderCode: String
}

input GenderUpsertNestedInput {
  update: GenderUpdateDataInput!
  create: GenderCreateInput!
}

input GenderUpsertWithoutCandidateInput {
  update: GenderUpdateWithoutCandidateDataInput!
  create: GenderCreateWithoutCandidateInput!
}

input GenderWhereInput {
  """Logical AND on all given filters."""
  AND: [GenderWhereInput!]

  """Logical OR on all given filters."""
  OR: [GenderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GenderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  genderName: String

  """All values that are not equal to given value."""
  genderName_not: String

  """All values that are contained in given list."""
  genderName_in: [String!]

  """All values that are not contained in given list."""
  genderName_not_in: [String!]

  """All values less than the given value."""
  genderName_lt: String

  """All values less than or equal the given value."""
  genderName_lte: String

  """All values greater than the given value."""
  genderName_gt: String

  """All values greater than or equal the given value."""
  genderName_gte: String

  """All values containing the given string."""
  genderName_contains: String

  """All values not containing the given string."""
  genderName_not_contains: String

  """All values starting with the given string."""
  genderName_starts_with: String

  """All values not starting with the given string."""
  genderName_not_starts_with: String

  """All values ending with the given string."""
  genderName_ends_with: String

  """All values not ending with the given string."""
  genderName_not_ends_with: String
  genderCode: String

  """All values that are not equal to given value."""
  genderCode_not: String

  """All values that are contained in given list."""
  genderCode_in: [String!]

  """All values that are not contained in given list."""
  genderCode_not_in: [String!]

  """All values less than the given value."""
  genderCode_lt: String

  """All values less than or equal the given value."""
  genderCode_lte: String

  """All values greater than the given value."""
  genderCode_gt: String

  """All values greater than or equal the given value."""
  genderCode_gte: String

  """All values containing the given string."""
  genderCode_contains: String

  """All values not containing the given string."""
  genderCode_not_contains: String

  """All values starting with the given string."""
  genderCode_starts_with: String

  """All values not starting with the given string."""
  genderCode_not_starts_with: String

  """All values ending with the given string."""
  genderCode_ends_with: String

  """All values not ending with the given string."""
  genderCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  candidate_every: CandidateWhereInput
  candidate_some: CandidateWhereInput
  candidate_none: CandidateWhereInput
}

input GenderWhereUniqueInput {
  id: ID
  genderCode: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createRegion(data: RegionCreateInput!): Region!
  createDivision(data: DivisionCreateInput!): Division!
  createSubDivision(data: SubDivisionCreateInput!): SubDivision!
  createTown(data: TownCreateInput!): Town!
  createCenter(data: CenterCreateInput!): Center!
  createEducationType(data: EducationTypeCreateInput!): EducationType!
  createExam(data: ExamCreateInput!): Exam!
  createSubject(data: SubjectCreateInput!): Subject!
  createSession(data: SessionCreateInput!): Session!
  createCandidate(data: CandidateCreateInput!): Candidate!
  createRank(data: RankCreateInput!): Rank!
  createOffice(data: OfficeCreateInput!): Office!
  createCountry(data: CountryCreateInput!): Country!
  createPhase(data: PhaseCreateInput!): Phase!
  createReport(data: ReportCreateInput!): Report!
  createCenterExamSession(data: CenterExamSessionCreateInput!): CenterExamSession!
  createExamSession(data: ExamSessionCreateInput!): ExamSession!
  createCenterExamSessionSeries(data: CenterExamSessionSeriesCreateInput!): CenterExamSessionSeries!
  createScore(data: ScoreCreateInput!): Score!
  createRegistration(data: RegistrationCreateInput!): Registration!
  createCenterExamSessionExaminer(data: CenterExamSessionExaminerCreateInput!): CenterExamSessionExaminer!
  createGender(data: GenderCreateInput!): Gender!
  createExaminer(data: ExaminerCreateInput!): Examiner!
  createSubjectSeries(data: SubjectSeriesCreateInput!): SubjectSeries!
  createSeries(data: SeriesCreateInput!): Series!
  createSubjectType(data: SubjectTypeCreateInput!): SubjectType!
  createPhaseRank(data: PhaseRankCreateInput!): PhaseRank!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateDivision(data: DivisionUpdateInput!, where: DivisionWhereUniqueInput!): Division
  updateSubDivision(data: SubDivisionUpdateInput!, where: SubDivisionWhereUniqueInput!): SubDivision
  updateTown(data: TownUpdateInput!, where: TownWhereUniqueInput!): Town
  updateCenter(data: CenterUpdateInput!, where: CenterWhereUniqueInput!): Center
  updateEducationType(data: EducationTypeUpdateInput!, where: EducationTypeWhereUniqueInput!): EducationType
  updateExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  updateRank(data: RankUpdateInput!, where: RankWhereUniqueInput!): Rank
  updateOffice(data: OfficeUpdateInput!, where: OfficeWhereUniqueInput!): Office
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updatePhase(data: PhaseUpdateInput!, where: PhaseWhereUniqueInput!): Phase
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateCenterExamSession(data: CenterExamSessionUpdateInput!, where: CenterExamSessionWhereUniqueInput!): CenterExamSession
  updateExamSession(data: ExamSessionUpdateInput!, where: ExamSessionWhereUniqueInput!): ExamSession
  updateCenterExamSessionSeries(data: CenterExamSessionSeriesUpdateInput!, where: CenterExamSessionSeriesWhereUniqueInput!): CenterExamSessionSeries
  updateScore(data: ScoreUpdateInput!, where: ScoreWhereUniqueInput!): Score
  updateRegistration(data: RegistrationUpdateInput!, where: RegistrationWhereUniqueInput!): Registration
  updateCenterExamSessionExaminer(data: CenterExamSessionExaminerUpdateInput!, where: CenterExamSessionExaminerWhereUniqueInput!): CenterExamSessionExaminer
  updateGender(data: GenderUpdateInput!, where: GenderWhereUniqueInput!): Gender
  updateExaminer(data: ExaminerUpdateInput!, where: ExaminerWhereUniqueInput!): Examiner
  updateSubjectSeries(data: SubjectSeriesUpdateInput!, where: SubjectSeriesWhereUniqueInput!): SubjectSeries
  updateSeries(data: SeriesUpdateInput!, where: SeriesWhereUniqueInput!): Series
  updateSubjectType(data: SubjectTypeUpdateInput!, where: SubjectTypeWhereUniqueInput!): SubjectType
  updatePhaseRank(data: PhaseRankUpdateInput!, where: PhaseRankWhereUniqueInput!): PhaseRank
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteDivision(where: DivisionWhereUniqueInput!): Division
  deleteSubDivision(where: SubDivisionWhereUniqueInput!): SubDivision
  deleteTown(where: TownWhereUniqueInput!): Town
  deleteCenter(where: CenterWhereUniqueInput!): Center
  deleteEducationType(where: EducationTypeWhereUniqueInput!): EducationType
  deleteExam(where: ExamWhereUniqueInput!): Exam
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteRank(where: RankWhereUniqueInput!): Rank
  deleteOffice(where: OfficeWhereUniqueInput!): Office
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deletePhase(where: PhaseWhereUniqueInput!): Phase
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteCenterExamSession(where: CenterExamSessionWhereUniqueInput!): CenterExamSession
  deleteExamSession(where: ExamSessionWhereUniqueInput!): ExamSession
  deleteCenterExamSessionSeries(where: CenterExamSessionSeriesWhereUniqueInput!): CenterExamSessionSeries
  deleteScore(where: ScoreWhereUniqueInput!): Score
  deleteRegistration(where: RegistrationWhereUniqueInput!): Registration
  deleteCenterExamSessionExaminer(where: CenterExamSessionExaminerWhereUniqueInput!): CenterExamSessionExaminer
  deleteGender(where: GenderWhereUniqueInput!): Gender
  deleteExaminer(where: ExaminerWhereUniqueInput!): Examiner
  deleteSubjectSeries(where: SubjectSeriesWhereUniqueInput!): SubjectSeries
  deleteSeries(where: SeriesWhereUniqueInput!): Series
  deleteSubjectType(where: SubjectTypeWhereUniqueInput!): SubjectType
  deletePhaseRank(where: PhaseRankWhereUniqueInput!): PhaseRank
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  upsertDivision(where: DivisionWhereUniqueInput!, create: DivisionCreateInput!, update: DivisionUpdateInput!): Division!
  upsertSubDivision(where: SubDivisionWhereUniqueInput!, create: SubDivisionCreateInput!, update: SubDivisionUpdateInput!): SubDivision!
  upsertTown(where: TownWhereUniqueInput!, create: TownCreateInput!, update: TownUpdateInput!): Town!
  upsertCenter(where: CenterWhereUniqueInput!, create: CenterCreateInput!, update: CenterUpdateInput!): Center!
  upsertEducationType(where: EducationTypeWhereUniqueInput!, create: EducationTypeCreateInput!, update: EducationTypeUpdateInput!): EducationType!
  upsertExam(where: ExamWhereUniqueInput!, create: ExamCreateInput!, update: ExamUpdateInput!): Exam!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertCandidate(where: CandidateWhereUniqueInput!, create: CandidateCreateInput!, update: CandidateUpdateInput!): Candidate!
  upsertRank(where: RankWhereUniqueInput!, create: RankCreateInput!, update: RankUpdateInput!): Rank!
  upsertOffice(where: OfficeWhereUniqueInput!, create: OfficeCreateInput!, update: OfficeUpdateInput!): Office!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertPhase(where: PhaseWhereUniqueInput!, create: PhaseCreateInput!, update: PhaseUpdateInput!): Phase!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  upsertCenterExamSession(where: CenterExamSessionWhereUniqueInput!, create: CenterExamSessionCreateInput!, update: CenterExamSessionUpdateInput!): CenterExamSession!
  upsertExamSession(where: ExamSessionWhereUniqueInput!, create: ExamSessionCreateInput!, update: ExamSessionUpdateInput!): ExamSession!
  upsertCenterExamSessionSeries(where: CenterExamSessionSeriesWhereUniqueInput!, create: CenterExamSessionSeriesCreateInput!, update: CenterExamSessionSeriesUpdateInput!): CenterExamSessionSeries!
  upsertScore(where: ScoreWhereUniqueInput!, create: ScoreCreateInput!, update: ScoreUpdateInput!): Score!
  upsertRegistration(where: RegistrationWhereUniqueInput!, create: RegistrationCreateInput!, update: RegistrationUpdateInput!): Registration!
  upsertCenterExamSessionExaminer(where: CenterExamSessionExaminerWhereUniqueInput!, create: CenterExamSessionExaminerCreateInput!, update: CenterExamSessionExaminerUpdateInput!): CenterExamSessionExaminer!
  upsertGender(where: GenderWhereUniqueInput!, create: GenderCreateInput!, update: GenderUpdateInput!): Gender!
  upsertExaminer(where: ExaminerWhereUniqueInput!, create: ExaminerCreateInput!, update: ExaminerUpdateInput!): Examiner!
  upsertSubjectSeries(where: SubjectSeriesWhereUniqueInput!, create: SubjectSeriesCreateInput!, update: SubjectSeriesUpdateInput!): SubjectSeries!
  upsertSeries(where: SeriesWhereUniqueInput!, create: SeriesCreateInput!, update: SeriesUpdateInput!): Series!
  upsertSubjectType(where: SubjectTypeWhereUniqueInput!, create: SubjectTypeCreateInput!, update: SubjectTypeUpdateInput!): SubjectType!
  upsertPhaseRank(where: PhaseRankWhereUniqueInput!, create: PhaseRankCreateInput!, update: PhaseRankUpdateInput!): PhaseRank!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  updateManyDivisions(data: DivisionUpdateManyMutationInput!, where: DivisionWhereInput): BatchPayload!
  updateManySubDivisions(data: SubDivisionUpdateManyMutationInput!, where: SubDivisionWhereInput): BatchPayload!
  updateManyTowns(data: TownUpdateManyMutationInput!, where: TownWhereInput): BatchPayload!
  updateManyCenters(data: CenterUpdateManyMutationInput!, where: CenterWhereInput): BatchPayload!
  updateManyEducationTypes(data: EducationTypeUpdateManyMutationInput!, where: EducationTypeWhereInput): BatchPayload!
  updateManyExams(data: ExamUpdateManyMutationInput!, where: ExamWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyCandidates(data: CandidateUpdateManyMutationInput!, where: CandidateWhereInput): BatchPayload!
  updateManyRanks(data: RankUpdateManyMutationInput!, where: RankWhereInput): BatchPayload!
  updateManyOffices(data: OfficeUpdateManyMutationInput!, where: OfficeWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyPhases(data: PhaseUpdateManyMutationInput!, where: PhaseWhereInput): BatchPayload!
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  updateManyScores(data: ScoreUpdateManyMutationInput!, where: ScoreWhereInput): BatchPayload!
  updateManyRegistrations(data: RegistrationUpdateManyMutationInput!, where: RegistrationWhereInput): BatchPayload!
  updateManyGenders(data: GenderUpdateManyMutationInput!, where: GenderWhereInput): BatchPayload!
  updateManyExaminers(data: ExaminerUpdateManyMutationInput!, where: ExaminerWhereInput): BatchPayload!
  updateManySubjectSerieses(data: SubjectSeriesUpdateManyMutationInput!, where: SubjectSeriesWhereInput): BatchPayload!
  updateManySerieses(data: SeriesUpdateManyMutationInput!, where: SeriesWhereInput): BatchPayload!
  updateManySubjectTypes(data: SubjectTypeUpdateManyMutationInput!, where: SubjectTypeWhereInput): BatchPayload!
  updateManyPhaseRanks(data: PhaseRankUpdateManyMutationInput!, where: PhaseRankWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  deleteManyDivisions(where: DivisionWhereInput): BatchPayload!
  deleteManySubDivisions(where: SubDivisionWhereInput): BatchPayload!
  deleteManyTowns(where: TownWhereInput): BatchPayload!
  deleteManyCenters(where: CenterWhereInput): BatchPayload!
  deleteManyEducationTypes(where: EducationTypeWhereInput): BatchPayload!
  deleteManyExams(where: ExamWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyCandidates(where: CandidateWhereInput): BatchPayload!
  deleteManyRanks(where: RankWhereInput): BatchPayload!
  deleteManyOffices(where: OfficeWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyPhases(where: PhaseWhereInput): BatchPayload!
  deleteManyReports(where: ReportWhereInput): BatchPayload!
  deleteManyCenterExamSessions(where: CenterExamSessionWhereInput): BatchPayload!
  deleteManyExamSessions(where: ExamSessionWhereInput): BatchPayload!
  deleteManyCenterExamSessionSerieses(where: CenterExamSessionSeriesWhereInput): BatchPayload!
  deleteManyScores(where: ScoreWhereInput): BatchPayload!
  deleteManyRegistrations(where: RegistrationWhereInput): BatchPayload!
  deleteManyCenterExamSessionExaminers(where: CenterExamSessionExaminerWhereInput): BatchPayload!
  deleteManyGenders(where: GenderWhereInput): BatchPayload!
  deleteManyExaminers(where: ExaminerWhereInput): BatchPayload!
  deleteManySubjectSerieses(where: SubjectSeriesWhereInput): BatchPayload!
  deleteManySerieses(where: SeriesWhereInput): BatchPayload!
  deleteManySubjectTypes(where: SubjectTypeWhereInput): BatchPayload!
  deleteManyPhaseRanks(where: PhaseRankWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Office implements Node {
  id: ID!
  officeName: String!
  officeCode: String!
  town(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Town!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type OfficeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OfficeEdge]!
  aggregate: AggregateOffice!
}

input OfficeCreateInput {
  id: ID
  officeName: String!
  officeCode: String!
  town: TownCreateManyWithoutOfficeInput
}

input OfficeCreateOneWithoutTownInput {
  create: OfficeCreateWithoutTownInput
  connect: OfficeWhereUniqueInput
}

input OfficeCreateWithoutTownInput {
  id: ID
  officeName: String!
  officeCode: String!
}

"""An edge in a connection."""
type OfficeEdge {
  """The item at the end of the edge."""
  node: Office!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OfficeOrderByInput {
  id_ASC
  id_DESC
  officeName_ASC
  officeName_DESC
  officeCode_ASC
  officeCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OfficePreviousValues {
  id: ID!
  officeName: String!
  officeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OfficeSubscriptionPayload {
  mutation: MutationType!
  node: Office
  updatedFields: [String!]
  previousValues: OfficePreviousValues
}

input OfficeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OfficeWhereInput
}

input OfficeUpdateInput {
  officeName: String
  officeCode: String
  town: TownUpdateManyWithoutOfficeInput
}

input OfficeUpdateManyMutationInput {
  officeName: String
  officeCode: String
}

input OfficeUpdateOneWithoutTownInput {
  create: OfficeCreateWithoutTownInput
  connect: OfficeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfficeUpdateWithoutTownDataInput
  upsert: OfficeUpsertWithoutTownInput
}

input OfficeUpdateWithoutTownDataInput {
  officeName: String
  officeCode: String
}

input OfficeUpsertWithoutTownInput {
  update: OfficeUpdateWithoutTownDataInput!
  create: OfficeCreateWithoutTownInput!
}

input OfficeWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficeWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  officeName: String

  """All values that are not equal to given value."""
  officeName_not: String

  """All values that are contained in given list."""
  officeName_in: [String!]

  """All values that are not contained in given list."""
  officeName_not_in: [String!]

  """All values less than the given value."""
  officeName_lt: String

  """All values less than or equal the given value."""
  officeName_lte: String

  """All values greater than the given value."""
  officeName_gt: String

  """All values greater than or equal the given value."""
  officeName_gte: String

  """All values containing the given string."""
  officeName_contains: String

  """All values not containing the given string."""
  officeName_not_contains: String

  """All values starting with the given string."""
  officeName_starts_with: String

  """All values not starting with the given string."""
  officeName_not_starts_with: String

  """All values ending with the given string."""
  officeName_ends_with: String

  """All values not ending with the given string."""
  officeName_not_ends_with: String
  officeCode: String

  """All values that are not equal to given value."""
  officeCode_not: String

  """All values that are contained in given list."""
  officeCode_in: [String!]

  """All values that are not contained in given list."""
  officeCode_not_in: [String!]

  """All values less than the given value."""
  officeCode_lt: String

  """All values less than or equal the given value."""
  officeCode_lte: String

  """All values greater than the given value."""
  officeCode_gt: String

  """All values greater than or equal the given value."""
  officeCode_gte: String

  """All values containing the given string."""
  officeCode_contains: String

  """All values not containing the given string."""
  officeCode_not_contains: String

  """All values starting with the given string."""
  officeCode_starts_with: String

  """All values not starting with the given string."""
  officeCode_not_starts_with: String

  """All values ending with the given string."""
  officeCode_ends_with: String

  """All values not ending with the given string."""
  officeCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  town_every: TownWhereInput
  town_some: TownWhereInput
  town_none: TownWhereInput
}

input OfficeWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Phase implements Node {
  id: ID!
  phaseName: String!
  phaseCode: String!
  phaseRank(where: PhaseRankWhereInput, orderBy: PhaseRankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhaseRank!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PhaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhaseEdge]!
  aggregate: AggregatePhase!
}

input PhaseCreateInput {
  id: ID
  phaseName: String!
  phaseCode: String!
  phaseRank: PhaseRankCreateManyWithoutPhaseInput
}

input PhaseCreateOneWithoutPhaseRankInput {
  create: PhaseCreateWithoutPhaseRankInput
  connect: PhaseWhereUniqueInput
}

input PhaseCreateWithoutPhaseRankInput {
  id: ID
  phaseName: String!
  phaseCode: String!
}

"""An edge in a connection."""
type PhaseEdge {
  """The item at the end of the edge."""
  node: Phase!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhaseOrderByInput {
  id_ASC
  id_DESC
  phaseName_ASC
  phaseName_DESC
  phaseCode_ASC
  phaseCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhasePreviousValues {
  id: ID!
  phaseName: String!
  phaseCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhaseRank implements Node {
  id: ID!
  phase: Phase!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PhaseRankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhaseRankEdge]!
  aggregate: AggregatePhaseRank!
}

input PhaseRankCreateInput {
  id: ID
  rankName: String!
  rankCode: String!
  phase: PhaseCreateOneWithoutPhaseRankInput!
}

input PhaseRankCreateManyWithoutPhaseInput {
  create: [PhaseRankCreateWithoutPhaseInput!]
  connect: [PhaseRankWhereUniqueInput!]
}

input PhaseRankCreateOneInput {
  create: PhaseRankCreateInput
  connect: PhaseRankWhereUniqueInput
}

input PhaseRankCreateWithoutPhaseInput {
  id: ID
  rankName: String!
  rankCode: String!
}

"""An edge in a connection."""
type PhaseRankEdge {
  """The item at the end of the edge."""
  node: PhaseRank!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhaseRankOrderByInput {
  id_ASC
  id_DESC
  rankName_ASC
  rankName_DESC
  rankCode_ASC
  rankCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhaseRankPreviousValues {
  id: ID!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhaseRankScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PhaseRankScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhaseRankScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhaseRankScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankName: String

  """All values that are not equal to given value."""
  rankName_not: String

  """All values that are contained in given list."""
  rankName_in: [String!]

  """All values that are not contained in given list."""
  rankName_not_in: [String!]

  """All values less than the given value."""
  rankName_lt: String

  """All values less than or equal the given value."""
  rankName_lte: String

  """All values greater than the given value."""
  rankName_gt: String

  """All values greater than or equal the given value."""
  rankName_gte: String

  """All values containing the given string."""
  rankName_contains: String

  """All values not containing the given string."""
  rankName_not_contains: String

  """All values starting with the given string."""
  rankName_starts_with: String

  """All values not starting with the given string."""
  rankName_not_starts_with: String

  """All values ending with the given string."""
  rankName_ends_with: String

  """All values not ending with the given string."""
  rankName_not_ends_with: String
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PhaseRankSubscriptionPayload {
  mutation: MutationType!
  node: PhaseRank
  updatedFields: [String!]
  previousValues: PhaseRankPreviousValues
}

input PhaseRankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhaseRankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhaseRankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhaseRankSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhaseRankWhereInput
}

input PhaseRankUpdateDataInput {
  rankName: String
  rankCode: String
  phase: PhaseUpdateOneRequiredWithoutPhaseRankInput
}

input PhaseRankUpdateInput {
  rankName: String
  rankCode: String
  phase: PhaseUpdateOneRequiredWithoutPhaseRankInput
}

input PhaseRankUpdateManyDataInput {
  rankName: String
  rankCode: String
}

input PhaseRankUpdateManyMutationInput {
  rankName: String
  rankCode: String
}

input PhaseRankUpdateManyWithoutPhaseInput {
  create: [PhaseRankCreateWithoutPhaseInput!]
  connect: [PhaseRankWhereUniqueInput!]
  set: [PhaseRankWhereUniqueInput!]
  disconnect: [PhaseRankWhereUniqueInput!]
  delete: [PhaseRankWhereUniqueInput!]
  update: [PhaseRankUpdateWithWhereUniqueWithoutPhaseInput!]
  updateMany: [PhaseRankUpdateManyWithWhereNestedInput!]
  deleteMany: [PhaseRankScalarWhereInput!]
  upsert: [PhaseRankUpsertWithWhereUniqueWithoutPhaseInput!]
}

input PhaseRankUpdateManyWithWhereNestedInput {
  where: PhaseRankScalarWhereInput!
  data: PhaseRankUpdateManyDataInput!
}

input PhaseRankUpdateOneRequiredInput {
  create: PhaseRankCreateInput
  connect: PhaseRankWhereUniqueInput
  update: PhaseRankUpdateDataInput
  upsert: PhaseRankUpsertNestedInput
}

input PhaseRankUpdateWithoutPhaseDataInput {
  rankName: String
  rankCode: String
}

input PhaseRankUpdateWithWhereUniqueWithoutPhaseInput {
  where: PhaseRankWhereUniqueInput!
  data: PhaseRankUpdateWithoutPhaseDataInput!
}

input PhaseRankUpsertNestedInput {
  update: PhaseRankUpdateDataInput!
  create: PhaseRankCreateInput!
}

input PhaseRankUpsertWithWhereUniqueWithoutPhaseInput {
  where: PhaseRankWhereUniqueInput!
  update: PhaseRankUpdateWithoutPhaseDataInput!
  create: PhaseRankCreateWithoutPhaseInput!
}

input PhaseRankWhereInput {
  """Logical AND on all given filters."""
  AND: [PhaseRankWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhaseRankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhaseRankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankName: String

  """All values that are not equal to given value."""
  rankName_not: String

  """All values that are contained in given list."""
  rankName_in: [String!]

  """All values that are not contained in given list."""
  rankName_not_in: [String!]

  """All values less than the given value."""
  rankName_lt: String

  """All values less than or equal the given value."""
  rankName_lte: String

  """All values greater than the given value."""
  rankName_gt: String

  """All values greater than or equal the given value."""
  rankName_gte: String

  """All values containing the given string."""
  rankName_contains: String

  """All values not containing the given string."""
  rankName_not_contains: String

  """All values starting with the given string."""
  rankName_starts_with: String

  """All values not starting with the given string."""
  rankName_not_starts_with: String

  """All values ending with the given string."""
  rankName_ends_with: String

  """All values not ending with the given string."""
  rankName_not_ends_with: String
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  phase: PhaseWhereInput
}

input PhaseRankWhereUniqueInput {
  id: ID
}

type PhaseSubscriptionPayload {
  mutation: MutationType!
  node: Phase
  updatedFields: [String!]
  previousValues: PhasePreviousValues
}

input PhaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhaseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhaseWhereInput
}

input PhaseUpdateInput {
  phaseName: String
  phaseCode: String
  phaseRank: PhaseRankUpdateManyWithoutPhaseInput
}

input PhaseUpdateManyMutationInput {
  phaseName: String
  phaseCode: String
}

input PhaseUpdateOneRequiredWithoutPhaseRankInput {
  create: PhaseCreateWithoutPhaseRankInput
  connect: PhaseWhereUniqueInput
  update: PhaseUpdateWithoutPhaseRankDataInput
  upsert: PhaseUpsertWithoutPhaseRankInput
}

input PhaseUpdateWithoutPhaseRankDataInput {
  phaseName: String
  phaseCode: String
}

input PhaseUpsertWithoutPhaseRankInput {
  update: PhaseUpdateWithoutPhaseRankDataInput!
  create: PhaseCreateWithoutPhaseRankInput!
}

input PhaseWhereInput {
  """Logical AND on all given filters."""
  AND: [PhaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  phaseName: String

  """All values that are not equal to given value."""
  phaseName_not: String

  """All values that are contained in given list."""
  phaseName_in: [String!]

  """All values that are not contained in given list."""
  phaseName_not_in: [String!]

  """All values less than the given value."""
  phaseName_lt: String

  """All values less than or equal the given value."""
  phaseName_lte: String

  """All values greater than the given value."""
  phaseName_gt: String

  """All values greater than or equal the given value."""
  phaseName_gte: String

  """All values containing the given string."""
  phaseName_contains: String

  """All values not containing the given string."""
  phaseName_not_contains: String

  """All values starting with the given string."""
  phaseName_starts_with: String

  """All values not starting with the given string."""
  phaseName_not_starts_with: String

  """All values ending with the given string."""
  phaseName_ends_with: String

  """All values not ending with the given string."""
  phaseName_not_ends_with: String
  phaseCode: String

  """All values that are not equal to given value."""
  phaseCode_not: String

  """All values that are contained in given list."""
  phaseCode_in: [String!]

  """All values that are not contained in given list."""
  phaseCode_not_in: [String!]

  """All values less than the given value."""
  phaseCode_lt: String

  """All values less than or equal the given value."""
  phaseCode_lte: String

  """All values greater than the given value."""
  phaseCode_gt: String

  """All values greater than or equal the given value."""
  phaseCode_gte: String

  """All values containing the given string."""
  phaseCode_contains: String

  """All values not containing the given string."""
  phaseCode_not_contains: String

  """All values starting with the given string."""
  phaseCode_starts_with: String

  """All values not starting with the given string."""
  phaseCode_not_starts_with: String

  """All values ending with the given string."""
  phaseCode_ends_with: String

  """All values not ending with the given string."""
  phaseCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  phaseRank_every: PhaseRankWhereInput
  phaseRank_some: PhaseRankWhereInput
  phaseRank_none: PhaseRankWhereInput
}

input PhaseWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  divisions(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Division]!
  subDivisions(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubDivision]!
  towns(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Town]!
  centers(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center]!
  educationTypes(where: EducationTypeWhereInput, orderBy: EducationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EducationType]!
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate]!
  ranks(where: RankWhereInput, orderBy: RankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rank]!
  offices(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Office]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  phases(where: PhaseWhereInput, orderBy: PhaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phase]!
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  centerExamSessions(where: CenterExamSessionWhereInput, orderBy: CenterExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSession]!
  examSessions(where: ExamSessionWhereInput, orderBy: ExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExamSession]!
  centerExamSessionSerieses(where: CenterExamSessionSeriesWhereInput, orderBy: CenterExamSessionSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionSeries]!
  scores(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Score]!
  registrations(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration]!
  centerExamSessionExaminers(where: CenterExamSessionExaminerWhereInput, orderBy: CenterExamSessionExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionExaminer]!
  genders(where: GenderWhereInput, orderBy: GenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gender]!
  examiners(where: ExaminerWhereInput, orderBy: ExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Examiner]!
  subjectSerieses(where: SubjectSeriesWhereInput, orderBy: SubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSeries]!
  serieses(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Series]!
  subjectTypes(where: SubjectTypeWhereInput, orderBy: SubjectTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectType]!
  phaseRanks(where: PhaseRankWhereInput, orderBy: PhaseRankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhaseRank]!
  user(where: UserWhereUniqueInput!): User
  region(where: RegionWhereUniqueInput!): Region
  division(where: DivisionWhereUniqueInput!): Division
  subDivision(where: SubDivisionWhereUniqueInput!): SubDivision
  town(where: TownWhereUniqueInput!): Town
  center(where: CenterWhereUniqueInput!): Center
  educationType(where: EducationTypeWhereUniqueInput!): EducationType
  exam(where: ExamWhereUniqueInput!): Exam
  subject(where: SubjectWhereUniqueInput!): Subject
  session(where: SessionWhereUniqueInput!): Session
  candidate(where: CandidateWhereUniqueInput!): Candidate
  rank(where: RankWhereUniqueInput!): Rank
  office(where: OfficeWhereUniqueInput!): Office
  country(where: CountryWhereUniqueInput!): Country
  phase(where: PhaseWhereUniqueInput!): Phase
  report(where: ReportWhereUniqueInput!): Report
  centerExamSession(where: CenterExamSessionWhereUniqueInput!): CenterExamSession
  examSession(where: ExamSessionWhereUniqueInput!): ExamSession
  centerExamSessionSeries(where: CenterExamSessionSeriesWhereUniqueInput!): CenterExamSessionSeries
  score(where: ScoreWhereUniqueInput!): Score
  registration(where: RegistrationWhereUniqueInput!): Registration
  centerExamSessionExaminer(where: CenterExamSessionExaminerWhereUniqueInput!): CenterExamSessionExaminer
  gender(where: GenderWhereUniqueInput!): Gender
  examiner(where: ExaminerWhereUniqueInput!): Examiner
  subjectSeries(where: SubjectSeriesWhereUniqueInput!): SubjectSeries
  series(where: SeriesWhereUniqueInput!): Series
  subjectType(where: SubjectTypeWhereUniqueInput!): SubjectType
  phaseRank(where: PhaseRankWhereUniqueInput!): PhaseRank
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  divisionsConnection(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DivisionConnection!
  subDivisionsConnection(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubDivisionConnection!
  townsConnection(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TownConnection!
  centersConnection(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterConnection!
  educationTypesConnection(where: EducationTypeWhereInput, orderBy: EducationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationTypeConnection!
  examsConnection(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExamConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  candidatesConnection(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidateConnection!
  ranksConnection(where: RankWhereInput, orderBy: RankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RankConnection!
  officesConnection(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfficeConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  phasesConnection(where: PhaseWhereInput, orderBy: PhaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhaseConnection!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  centerExamSessionsConnection(where: CenterExamSessionWhereInput, orderBy: CenterExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterExamSessionConnection!
  examSessionsConnection(where: ExamSessionWhereInput, orderBy: ExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExamSessionConnection!
  centerExamSessionSeriesesConnection(where: CenterExamSessionSeriesWhereInput, orderBy: CenterExamSessionSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterExamSessionSeriesConnection!
  scoresConnection(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoreConnection!
  registrationsConnection(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegistrationConnection!
  centerExamSessionExaminersConnection(where: CenterExamSessionExaminerWhereInput, orderBy: CenterExamSessionExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterExamSessionExaminerConnection!
  gendersConnection(where: GenderWhereInput, orderBy: GenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenderConnection!
  examinersConnection(where: ExaminerWhereInput, orderBy: ExaminerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExaminerConnection!
  subjectSeriesesConnection(where: SubjectSeriesWhereInput, orderBy: SubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectSeriesConnection!
  seriesesConnection(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeriesConnection!
  subjectTypesConnection(where: SubjectTypeWhereInput, orderBy: SubjectTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectTypeConnection!
  phaseRanksConnection(where: PhaseRankWhereInput, orderBy: PhaseRankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhaseRankConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Rank implements Node {
  id: ID!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RankEdge]!
  aggregate: AggregateRank!
}

input RankCreateInput {
  id: ID
  rankName: String!
  rankCode: String!
}

"""An edge in a connection."""
type RankEdge {
  """The item at the end of the edge."""
  node: Rank!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RankOrderByInput {
  id_ASC
  id_DESC
  rankName_ASC
  rankName_DESC
  rankCode_ASC
  rankCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RankPreviousValues {
  id: ID!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RankSubscriptionPayload {
  mutation: MutationType!
  node: Rank
  updatedFields: [String!]
  previousValues: RankPreviousValues
}

input RankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RankSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RankWhereInput
}

input RankUpdateInput {
  rankName: String
  rankCode: String
}

input RankUpdateManyMutationInput {
  rankName: String
  rankCode: String
}

input RankWhereInput {
  """Logical AND on all given filters."""
  AND: [RankWhereInput!]

  """Logical OR on all given filters."""
  OR: [RankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankName: String

  """All values that are not equal to given value."""
  rankName_not: String

  """All values that are contained in given list."""
  rankName_in: [String!]

  """All values that are not contained in given list."""
  rankName_not_in: [String!]

  """All values less than the given value."""
  rankName_lt: String

  """All values less than or equal the given value."""
  rankName_lte: String

  """All values greater than the given value."""
  rankName_gt: String

  """All values greater than or equal the given value."""
  rankName_gte: String

  """All values containing the given string."""
  rankName_contains: String

  """All values not containing the given string."""
  rankName_not_contains: String

  """All values starting with the given string."""
  rankName_starts_with: String

  """All values not starting with the given string."""
  rankName_not_starts_with: String

  """All values ending with the given string."""
  rankName_ends_with: String

  """All values not ending with the given string."""
  rankName_not_ends_with: String
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input RankWhereUniqueInput {
  id: ID
}

type Region implements Node {
  id: ID!
  regName: String!
  regCode: String!
  country: Country!
  createdAt: DateTime!
  updatedAt: DateTime!
  division(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Division!]
}

"""A connection to a list of items."""
type RegionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  regName: String!
  regCode: String!
  country: CountryCreateOneWithoutRegionInput!
  division: DivisionCreateManyWithoutRegionInput
}

input RegionCreateManyWithoutCountryInput {
  create: [RegionCreateWithoutCountryInput!]
  connect: [RegionWhereUniqueInput!]
}

input RegionCreateOneWithoutDivisionInput {
  create: RegionCreateWithoutDivisionInput
  connect: RegionWhereUniqueInput
}

input RegionCreateWithoutCountryInput {
  id: ID
  regName: String!
  regCode: String!
  division: DivisionCreateManyWithoutRegionInput
}

input RegionCreateWithoutDivisionInput {
  id: ID
  regName: String!
  regCode: String!
  country: CountryCreateOneWithoutRegionInput!
}

"""An edge in a connection."""
type RegionEdge {
  """The item at the end of the edge."""
  node: Region!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  regName_ASC
  regName_DESC
  regCode_ASC
  regCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RegionPreviousValues {
  id: ID!
  regName: String!
  regCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RegionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  regName: String

  """All values that are not equal to given value."""
  regName_not: String

  """All values that are contained in given list."""
  regName_in: [String!]

  """All values that are not contained in given list."""
  regName_not_in: [String!]

  """All values less than the given value."""
  regName_lt: String

  """All values less than or equal the given value."""
  regName_lte: String

  """All values greater than the given value."""
  regName_gt: String

  """All values greater than or equal the given value."""
  regName_gte: String

  """All values containing the given string."""
  regName_contains: String

  """All values not containing the given string."""
  regName_not_contains: String

  """All values starting with the given string."""
  regName_starts_with: String

  """All values not starting with the given string."""
  regName_not_starts_with: String

  """All values ending with the given string."""
  regName_ends_with: String

  """All values not ending with the given string."""
  regName_not_ends_with: String
  regCode: String

  """All values that are not equal to given value."""
  regCode_not: String

  """All values that are contained in given list."""
  regCode_in: [String!]

  """All values that are not contained in given list."""
  regCode_not_in: [String!]

  """All values less than the given value."""
  regCode_lt: String

  """All values less than or equal the given value."""
  regCode_lte: String

  """All values greater than the given value."""
  regCode_gt: String

  """All values greater than or equal the given value."""
  regCode_gte: String

  """All values containing the given string."""
  regCode_contains: String

  """All values not containing the given string."""
  regCode_not_contains: String

  """All values starting with the given string."""
  regCode_starts_with: String

  """All values not starting with the given string."""
  regCode_not_starts_with: String

  """All values ending with the given string."""
  regCode_ends_with: String

  """All values not ending with the given string."""
  regCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
}

input RegionUpdateInput {
  regName: String
  regCode: String
  country: CountryUpdateOneRequiredWithoutRegionInput
  division: DivisionUpdateManyWithoutRegionInput
}

input RegionUpdateManyDataInput {
  regName: String
  regCode: String
}

input RegionUpdateManyMutationInput {
  regName: String
  regCode: String
}

input RegionUpdateManyWithoutCountryInput {
  create: [RegionCreateWithoutCountryInput!]
  connect: [RegionWhereUniqueInput!]
  set: [RegionWhereUniqueInput!]
  disconnect: [RegionWhereUniqueInput!]
  delete: [RegionWhereUniqueInput!]
  update: [RegionUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [RegionUpdateManyWithWhereNestedInput!]
  deleteMany: [RegionScalarWhereInput!]
  upsert: [RegionUpsertWithWhereUniqueWithoutCountryInput!]
}

input RegionUpdateManyWithWhereNestedInput {
  where: RegionScalarWhereInput!
  data: RegionUpdateManyDataInput!
}

input RegionUpdateOneRequiredWithoutDivisionInput {
  create: RegionCreateWithoutDivisionInput
  connect: RegionWhereUniqueInput
  update: RegionUpdateWithoutDivisionDataInput
  upsert: RegionUpsertWithoutDivisionInput
}

input RegionUpdateWithoutCountryDataInput {
  regName: String
  regCode: String
  division: DivisionUpdateManyWithoutRegionInput
}

input RegionUpdateWithoutDivisionDataInput {
  regName: String
  regCode: String
  country: CountryUpdateOneRequiredWithoutRegionInput
}

input RegionUpdateWithWhereUniqueWithoutCountryInput {
  where: RegionWhereUniqueInput!
  data: RegionUpdateWithoutCountryDataInput!
}

input RegionUpsertWithoutDivisionInput {
  update: RegionUpdateWithoutDivisionDataInput!
  create: RegionCreateWithoutDivisionInput!
}

input RegionUpsertWithWhereUniqueWithoutCountryInput {
  where: RegionWhereUniqueInput!
  update: RegionUpdateWithoutCountryDataInput!
  create: RegionCreateWithoutCountryInput!
}

input RegionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  regName: String

  """All values that are not equal to given value."""
  regName_not: String

  """All values that are contained in given list."""
  regName_in: [String!]

  """All values that are not contained in given list."""
  regName_not_in: [String!]

  """All values less than the given value."""
  regName_lt: String

  """All values less than or equal the given value."""
  regName_lte: String

  """All values greater than the given value."""
  regName_gt: String

  """All values greater than or equal the given value."""
  regName_gte: String

  """All values containing the given string."""
  regName_contains: String

  """All values not containing the given string."""
  regName_not_contains: String

  """All values starting with the given string."""
  regName_starts_with: String

  """All values not starting with the given string."""
  regName_not_starts_with: String

  """All values ending with the given string."""
  regName_ends_with: String

  """All values not ending with the given string."""
  regName_not_ends_with: String
  regCode: String

  """All values that are not equal to given value."""
  regCode_not: String

  """All values that are contained in given list."""
  regCode_in: [String!]

  """All values that are not contained in given list."""
  regCode_not_in: [String!]

  """All values less than the given value."""
  regCode_lt: String

  """All values less than or equal the given value."""
  regCode_lte: String

  """All values greater than the given value."""
  regCode_gt: String

  """All values greater than or equal the given value."""
  regCode_gte: String

  """All values containing the given string."""
  regCode_contains: String

  """All values not containing the given string."""
  regCode_not_contains: String

  """All values starting with the given string."""
  regCode_starts_with: String

  """All values not starting with the given string."""
  regCode_not_starts_with: String

  """All values ending with the given string."""
  regCode_ends_with: String

  """All values not ending with the given string."""
  regCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  country: CountryWhereInput
  division_every: DivisionWhereInput
  division_some: DivisionWhereInput
  division_none: DivisionWhereInput
}

input RegionWhereUniqueInput {
  id: ID
  regCode: String
}

type Registration implements Node {
  id: ID!
  candidate: Candidate!
  centerExamSessionSeries: CenterExamSessionSeries!
  centerExamSession: CenterExamSession!
  candExamSecretCode: String!
  candExamSession: String!
  scores(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Score!]
  series: Series!
  candRegistrationNumber: String!
  serial: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RegistrationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegistrationEdge]!
  aggregate: AggregateRegistration!
}

input RegistrationCreateInput {
  id: ID
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  candidate: CandidateCreateOneWithoutRegistrationInput!
  centerExamSessionSeries: CenterExamSessionSeriesCreateOneWithoutRegistrationInput!
  centerExamSession: CenterExamSessionCreateOneWithoutRegistrationInput!
  scores: ScoreCreateManyWithoutRegistrationInput
  series: SeriesCreateOneInput!
}

input RegistrationCreateManyWithoutCandidateInput {
  create: [RegistrationCreateWithoutCandidateInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutCenterExamSessionInput {
  create: [RegistrationCreateWithoutCenterExamSessionInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutCenterExamSessionSeriesInput {
  create: [RegistrationCreateWithoutCenterExamSessionSeriesInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateOneWithoutScoresInput {
  create: RegistrationCreateWithoutScoresInput
  connect: RegistrationWhereUniqueInput
}

input RegistrationCreateWithoutCandidateInput {
  id: ID
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  centerExamSessionSeries: CenterExamSessionSeriesCreateOneWithoutRegistrationInput!
  centerExamSession: CenterExamSessionCreateOneWithoutRegistrationInput!
  scores: ScoreCreateManyWithoutRegistrationInput
  series: SeriesCreateOneInput!
}

input RegistrationCreateWithoutCenterExamSessionInput {
  id: ID
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  candidate: CandidateCreateOneWithoutRegistrationInput!
  centerExamSessionSeries: CenterExamSessionSeriesCreateOneWithoutRegistrationInput!
  scores: ScoreCreateManyWithoutRegistrationInput
  series: SeriesCreateOneInput!
}

input RegistrationCreateWithoutCenterExamSessionSeriesInput {
  id: ID
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  candidate: CandidateCreateOneWithoutRegistrationInput!
  centerExamSession: CenterExamSessionCreateOneWithoutRegistrationInput!
  scores: ScoreCreateManyWithoutRegistrationInput
  series: SeriesCreateOneInput!
}

input RegistrationCreateWithoutScoresInput {
  id: ID
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  candidate: CandidateCreateOneWithoutRegistrationInput!
  centerExamSessionSeries: CenterExamSessionSeriesCreateOneWithoutRegistrationInput!
  centerExamSession: CenterExamSessionCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneInput!
}

"""An edge in a connection."""
type RegistrationEdge {
  """The item at the end of the edge."""
  node: Registration!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegistrationOrderByInput {
  id_ASC
  id_DESC
  candExamSecretCode_ASC
  candExamSecretCode_DESC
  candExamSession_ASC
  candExamSession_DESC
  candRegistrationNumber_ASC
  candRegistrationNumber_DESC
  serial_ASC
  serial_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RegistrationPreviousValues {
  id: ID!
  candExamSecretCode: String!
  candExamSession: String!
  candRegistrationNumber: String!
  serial: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RegistrationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  candExamSecretCode: String

  """All values that are not equal to given value."""
  candExamSecretCode_not: String

  """All values that are contained in given list."""
  candExamSecretCode_in: [String!]

  """All values that are not contained in given list."""
  candExamSecretCode_not_in: [String!]

  """All values less than the given value."""
  candExamSecretCode_lt: String

  """All values less than or equal the given value."""
  candExamSecretCode_lte: String

  """All values greater than the given value."""
  candExamSecretCode_gt: String

  """All values greater than or equal the given value."""
  candExamSecretCode_gte: String

  """All values containing the given string."""
  candExamSecretCode_contains: String

  """All values not containing the given string."""
  candExamSecretCode_not_contains: String

  """All values starting with the given string."""
  candExamSecretCode_starts_with: String

  """All values not starting with the given string."""
  candExamSecretCode_not_starts_with: String

  """All values ending with the given string."""
  candExamSecretCode_ends_with: String

  """All values not ending with the given string."""
  candExamSecretCode_not_ends_with: String
  candExamSession: String

  """All values that are not equal to given value."""
  candExamSession_not: String

  """All values that are contained in given list."""
  candExamSession_in: [String!]

  """All values that are not contained in given list."""
  candExamSession_not_in: [String!]

  """All values less than the given value."""
  candExamSession_lt: String

  """All values less than or equal the given value."""
  candExamSession_lte: String

  """All values greater than the given value."""
  candExamSession_gt: String

  """All values greater than or equal the given value."""
  candExamSession_gte: String

  """All values containing the given string."""
  candExamSession_contains: String

  """All values not containing the given string."""
  candExamSession_not_contains: String

  """All values starting with the given string."""
  candExamSession_starts_with: String

  """All values not starting with the given string."""
  candExamSession_not_starts_with: String

  """All values ending with the given string."""
  candExamSession_ends_with: String

  """All values not ending with the given string."""
  candExamSession_not_ends_with: String
  candRegistrationNumber: String

  """All values that are not equal to given value."""
  candRegistrationNumber_not: String

  """All values that are contained in given list."""
  candRegistrationNumber_in: [String!]

  """All values that are not contained in given list."""
  candRegistrationNumber_not_in: [String!]

  """All values less than the given value."""
  candRegistrationNumber_lt: String

  """All values less than or equal the given value."""
  candRegistrationNumber_lte: String

  """All values greater than the given value."""
  candRegistrationNumber_gt: String

  """All values greater than or equal the given value."""
  candRegistrationNumber_gte: String

  """All values containing the given string."""
  candRegistrationNumber_contains: String

  """All values not containing the given string."""
  candRegistrationNumber_not_contains: String

  """All values starting with the given string."""
  candRegistrationNumber_starts_with: String

  """All values not starting with the given string."""
  candRegistrationNumber_not_starts_with: String

  """All values ending with the given string."""
  candRegistrationNumber_ends_with: String

  """All values not ending with the given string."""
  candRegistrationNumber_not_ends_with: String
  serial: Int

  """All values that are not equal to given value."""
  serial_not: Int

  """All values that are contained in given list."""
  serial_in: [Int!]

  """All values that are not contained in given list."""
  serial_not_in: [Int!]

  """All values less than the given value."""
  serial_lt: Int

  """All values less than or equal the given value."""
  serial_lte: Int

  """All values greater than the given value."""
  serial_gt: Int

  """All values greater than or equal the given value."""
  serial_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RegistrationSubscriptionPayload {
  mutation: MutationType!
  node: Registration
  updatedFields: [String!]
  previousValues: RegistrationPreviousValues
}

input RegistrationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegistrationWhereInput
}

input RegistrationUpdateInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateOneRequiredWithoutRegistrationInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutRegistrationInput
  scores: ScoreUpdateManyWithoutRegistrationInput
  series: SeriesUpdateOneRequiredInput
}

input RegistrationUpdateManyDataInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
}

input RegistrationUpdateManyMutationInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
}

input RegistrationUpdateManyWithoutCandidateInput {
  create: [RegistrationCreateWithoutCandidateInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutCandidateInput!]
  updateMany: [RegistrationUpdateManyWithWhereNestedInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutCandidateInput!]
}

input RegistrationUpdateManyWithoutCenterExamSessionInput {
  create: [RegistrationCreateWithoutCenterExamSessionInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutCenterExamSessionInput!]
  updateMany: [RegistrationUpdateManyWithWhereNestedInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutCenterExamSessionInput!]
}

input RegistrationUpdateManyWithoutCenterExamSessionSeriesInput {
  create: [RegistrationCreateWithoutCenterExamSessionSeriesInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutCenterExamSessionSeriesInput!]
  updateMany: [RegistrationUpdateManyWithWhereNestedInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutCenterExamSessionSeriesInput!]
}

input RegistrationUpdateManyWithWhereNestedInput {
  where: RegistrationScalarWhereInput!
  data: RegistrationUpdateManyDataInput!
}

input RegistrationUpdateOneRequiredWithoutScoresInput {
  create: RegistrationCreateWithoutScoresInput
  connect: RegistrationWhereUniqueInput
  update: RegistrationUpdateWithoutScoresDataInput
  upsert: RegistrationUpsertWithoutScoresInput
}

input RegistrationUpdateWithoutCandidateDataInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
  centerExamSessionSeries: CenterExamSessionSeriesUpdateOneRequiredWithoutRegistrationInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutRegistrationInput
  scores: ScoreUpdateManyWithoutRegistrationInput
  series: SeriesUpdateOneRequiredInput
}

input RegistrationUpdateWithoutCenterExamSessionDataInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateOneRequiredWithoutRegistrationInput
  scores: ScoreUpdateManyWithoutRegistrationInput
  series: SeriesUpdateOneRequiredInput
}

input RegistrationUpdateWithoutCenterExamSessionSeriesDataInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutRegistrationInput
  scores: ScoreUpdateManyWithoutRegistrationInput
  series: SeriesUpdateOneRequiredInput
}

input RegistrationUpdateWithoutScoresDataInput {
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
  serial: Int
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateOneRequiredWithoutRegistrationInput
  centerExamSession: CenterExamSessionUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredInput
}

input RegistrationUpdateWithWhereUniqueWithoutCandidateInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutCandidateDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutCenterExamSessionInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutCenterExamSessionDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutCenterExamSessionSeriesInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutCenterExamSessionSeriesDataInput!
}

input RegistrationUpsertWithoutScoresInput {
  update: RegistrationUpdateWithoutScoresDataInput!
  create: RegistrationCreateWithoutScoresInput!
}

input RegistrationUpsertWithWhereUniqueWithoutCandidateInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutCandidateDataInput!
  create: RegistrationCreateWithoutCandidateInput!
}

input RegistrationUpsertWithWhereUniqueWithoutCenterExamSessionInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutCenterExamSessionDataInput!
  create: RegistrationCreateWithoutCenterExamSessionInput!
}

input RegistrationUpsertWithWhereUniqueWithoutCenterExamSessionSeriesInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutCenterExamSessionSeriesDataInput!
  create: RegistrationCreateWithoutCenterExamSessionSeriesInput!
}

input RegistrationWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  candExamSecretCode: String

  """All values that are not equal to given value."""
  candExamSecretCode_not: String

  """All values that are contained in given list."""
  candExamSecretCode_in: [String!]

  """All values that are not contained in given list."""
  candExamSecretCode_not_in: [String!]

  """All values less than the given value."""
  candExamSecretCode_lt: String

  """All values less than or equal the given value."""
  candExamSecretCode_lte: String

  """All values greater than the given value."""
  candExamSecretCode_gt: String

  """All values greater than or equal the given value."""
  candExamSecretCode_gte: String

  """All values containing the given string."""
  candExamSecretCode_contains: String

  """All values not containing the given string."""
  candExamSecretCode_not_contains: String

  """All values starting with the given string."""
  candExamSecretCode_starts_with: String

  """All values not starting with the given string."""
  candExamSecretCode_not_starts_with: String

  """All values ending with the given string."""
  candExamSecretCode_ends_with: String

  """All values not ending with the given string."""
  candExamSecretCode_not_ends_with: String
  candExamSession: String

  """All values that are not equal to given value."""
  candExamSession_not: String

  """All values that are contained in given list."""
  candExamSession_in: [String!]

  """All values that are not contained in given list."""
  candExamSession_not_in: [String!]

  """All values less than the given value."""
  candExamSession_lt: String

  """All values less than or equal the given value."""
  candExamSession_lte: String

  """All values greater than the given value."""
  candExamSession_gt: String

  """All values greater than or equal the given value."""
  candExamSession_gte: String

  """All values containing the given string."""
  candExamSession_contains: String

  """All values not containing the given string."""
  candExamSession_not_contains: String

  """All values starting with the given string."""
  candExamSession_starts_with: String

  """All values not starting with the given string."""
  candExamSession_not_starts_with: String

  """All values ending with the given string."""
  candExamSession_ends_with: String

  """All values not ending with the given string."""
  candExamSession_not_ends_with: String
  candRegistrationNumber: String

  """All values that are not equal to given value."""
  candRegistrationNumber_not: String

  """All values that are contained in given list."""
  candRegistrationNumber_in: [String!]

  """All values that are not contained in given list."""
  candRegistrationNumber_not_in: [String!]

  """All values less than the given value."""
  candRegistrationNumber_lt: String

  """All values less than or equal the given value."""
  candRegistrationNumber_lte: String

  """All values greater than the given value."""
  candRegistrationNumber_gt: String

  """All values greater than or equal the given value."""
  candRegistrationNumber_gte: String

  """All values containing the given string."""
  candRegistrationNumber_contains: String

  """All values not containing the given string."""
  candRegistrationNumber_not_contains: String

  """All values starting with the given string."""
  candRegistrationNumber_starts_with: String

  """All values not starting with the given string."""
  candRegistrationNumber_not_starts_with: String

  """All values ending with the given string."""
  candRegistrationNumber_ends_with: String

  """All values not ending with the given string."""
  candRegistrationNumber_not_ends_with: String
  serial: Int

  """All values that are not equal to given value."""
  serial_not: Int

  """All values that are contained in given list."""
  serial_in: [Int!]

  """All values that are not contained in given list."""
  serial_not_in: [Int!]

  """All values less than the given value."""
  serial_lt: Int

  """All values less than or equal the given value."""
  serial_lte: Int

  """All values greater than the given value."""
  serial_gt: Int

  """All values greater than or equal the given value."""
  serial_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  candidate: CandidateWhereInput
  centerExamSessionSeries: CenterExamSessionSeriesWhereInput
  centerExamSession: CenterExamSessionWhereInput
  scores_every: ScoreWhereInput
  scores_some: ScoreWhereInput
  scores_none: ScoreWhereInput
  series: SeriesWhereInput
}

input RegistrationWhereUniqueInput {
  id: ID
  candExamSecretCode: String
  candExamSession: String
  candRegistrationNumber: String
}

type Report implements Node {
  id: ID!
  reportName: String!
  centerExamSessionExaminer: CenterExamSessionExaminer!
  reportImage: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  reportName: String!
  reportImage: String!
  centerExamSessionExaminer: CenterExamSessionExaminerCreateOneWithoutReportInput!
}

input ReportCreateManyWithoutCenterExamSessionExaminerInput {
  create: [ReportCreateWithoutCenterExamSessionExaminerInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateWithoutCenterExamSessionExaminerInput {
  id: ID
  reportName: String!
  reportImage: String!
}

"""An edge in a connection."""
type ReportEdge {
  """The item at the end of the edge."""
  node: Report!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  reportName_ASC
  reportName_DESC
  reportImage_ASC
  reportImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReportPreviousValues {
  id: ID!
  reportName: String!
  reportImage: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReportScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reportName: String

  """All values that are not equal to given value."""
  reportName_not: String

  """All values that are contained in given list."""
  reportName_in: [String!]

  """All values that are not contained in given list."""
  reportName_not_in: [String!]

  """All values less than the given value."""
  reportName_lt: String

  """All values less than or equal the given value."""
  reportName_lte: String

  """All values greater than the given value."""
  reportName_gt: String

  """All values greater than or equal the given value."""
  reportName_gte: String

  """All values containing the given string."""
  reportName_contains: String

  """All values not containing the given string."""
  reportName_not_contains: String

  """All values starting with the given string."""
  reportName_starts_with: String

  """All values not starting with the given string."""
  reportName_not_starts_with: String

  """All values ending with the given string."""
  reportName_ends_with: String

  """All values not ending with the given string."""
  reportName_not_ends_with: String
  reportImage: String

  """All values that are not equal to given value."""
  reportImage_not: String

  """All values that are contained in given list."""
  reportImage_in: [String!]

  """All values that are not contained in given list."""
  reportImage_not_in: [String!]

  """All values less than the given value."""
  reportImage_lt: String

  """All values less than or equal the given value."""
  reportImage_lte: String

  """All values greater than the given value."""
  reportImage_gt: String

  """All values greater than or equal the given value."""
  reportImage_gte: String

  """All values containing the given string."""
  reportImage_contains: String

  """All values not containing the given string."""
  reportImage_not_contains: String

  """All values starting with the given string."""
  reportImage_starts_with: String

  """All values not starting with the given string."""
  reportImage_not_starts_with: String

  """All values ending with the given string."""
  reportImage_ends_with: String

  """All values not ending with the given string."""
  reportImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
}

input ReportUpdateInput {
  reportName: String
  reportImage: String
  centerExamSessionExaminer: CenterExamSessionExaminerUpdateOneRequiredWithoutReportInput
}

input ReportUpdateManyDataInput {
  reportName: String
  reportImage: String
}

input ReportUpdateManyMutationInput {
  reportName: String
  reportImage: String
}

input ReportUpdateManyWithoutCenterExamSessionExaminerInput {
  create: [ReportCreateWithoutCenterExamSessionExaminerInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  delete: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutCenterExamSessionExaminerInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
  deleteMany: [ReportScalarWhereInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutCenterExamSessionExaminerInput!]
}

input ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput!
  data: ReportUpdateManyDataInput!
}

input ReportUpdateWithoutCenterExamSessionExaminerDataInput {
  reportName: String
  reportImage: String
}

input ReportUpdateWithWhereUniqueWithoutCenterExamSessionExaminerInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutCenterExamSessionExaminerDataInput!
}

input ReportUpsertWithWhereUniqueWithoutCenterExamSessionExaminerInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutCenterExamSessionExaminerDataInput!
  create: ReportCreateWithoutCenterExamSessionExaminerInput!
}

input ReportWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reportName: String

  """All values that are not equal to given value."""
  reportName_not: String

  """All values that are contained in given list."""
  reportName_in: [String!]

  """All values that are not contained in given list."""
  reportName_not_in: [String!]

  """All values less than the given value."""
  reportName_lt: String

  """All values less than or equal the given value."""
  reportName_lte: String

  """All values greater than the given value."""
  reportName_gt: String

  """All values greater than or equal the given value."""
  reportName_gte: String

  """All values containing the given string."""
  reportName_contains: String

  """All values not containing the given string."""
  reportName_not_contains: String

  """All values starting with the given string."""
  reportName_starts_with: String

  """All values not starting with the given string."""
  reportName_not_starts_with: String

  """All values ending with the given string."""
  reportName_ends_with: String

  """All values not ending with the given string."""
  reportName_not_ends_with: String
  reportImage: String

  """All values that are not equal to given value."""
  reportImage_not: String

  """All values that are contained in given list."""
  reportImage_in: [String!]

  """All values that are not contained in given list."""
  reportImage_not_in: [String!]

  """All values less than the given value."""
  reportImage_lt: String

  """All values less than or equal the given value."""
  reportImage_lte: String

  """All values greater than the given value."""
  reportImage_gt: String

  """All values greater than or equal the given value."""
  reportImage_gte: String

  """All values containing the given string."""
  reportImage_contains: String

  """All values not containing the given string."""
  reportImage_not_contains: String

  """All values starting with the given string."""
  reportImage_starts_with: String

  """All values not starting with the given string."""
  reportImage_not_starts_with: String

  """All values ending with the given string."""
  reportImage_ends_with: String

  """All values not ending with the given string."""
  reportImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerExamSessionExaminer: CenterExamSessionExaminerWhereInput
}

input ReportWhereUniqueInput {
  id: ID
}

type Score implements Node {
  id: ID!
  subjectAve: Float
  subjectTotal: Float
  registration: Registration!
  subjectSeries: SubjectSeries!
  presence: Boolean
  coeff: Int!
  candExamSecretCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ScoreConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoreEdge]!
  aggregate: AggregateScore!
}

input ScoreCreateInput {
  id: ID
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int!
  candExamSecretCode: String!
  registration: RegistrationCreateOneWithoutScoresInput!
  subjectSeries: SubjectSeriesCreateOneInput!
}

input ScoreCreateManyWithoutRegistrationInput {
  create: [ScoreCreateWithoutRegistrationInput!]
  connect: [ScoreWhereUniqueInput!]
}

input ScoreCreateWithoutRegistrationInput {
  id: ID
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int!
  candExamSecretCode: String!
  subjectSeries: SubjectSeriesCreateOneInput!
}

"""An edge in a connection."""
type ScoreEdge {
  """The item at the end of the edge."""
  node: Score!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoreOrderByInput {
  id_ASC
  id_DESC
  subjectAve_ASC
  subjectAve_DESC
  subjectTotal_ASC
  subjectTotal_DESC
  presence_ASC
  presence_DESC
  coeff_ASC
  coeff_DESC
  candExamSecretCode_ASC
  candExamSecretCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScorePreviousValues {
  id: ID!
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int!
  candExamSecretCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ScoreScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectAve: Float

  """All values that are not equal to given value."""
  subjectAve_not: Float

  """All values that are contained in given list."""
  subjectAve_in: [Float!]

  """All values that are not contained in given list."""
  subjectAve_not_in: [Float!]

  """All values less than the given value."""
  subjectAve_lt: Float

  """All values less than or equal the given value."""
  subjectAve_lte: Float

  """All values greater than the given value."""
  subjectAve_gt: Float

  """All values greater than or equal the given value."""
  subjectAve_gte: Float
  subjectTotal: Float

  """All values that are not equal to given value."""
  subjectTotal_not: Float

  """All values that are contained in given list."""
  subjectTotal_in: [Float!]

  """All values that are not contained in given list."""
  subjectTotal_not_in: [Float!]

  """All values less than the given value."""
  subjectTotal_lt: Float

  """All values less than or equal the given value."""
  subjectTotal_lte: Float

  """All values greater than the given value."""
  subjectTotal_gt: Float

  """All values greater than or equal the given value."""
  subjectTotal_gte: Float
  presence: Boolean

  """All values that are not equal to given value."""
  presence_not: Boolean
  coeff: Int

  """All values that are not equal to given value."""
  coeff_not: Int

  """All values that are contained in given list."""
  coeff_in: [Int!]

  """All values that are not contained in given list."""
  coeff_not_in: [Int!]

  """All values less than the given value."""
  coeff_lt: Int

  """All values less than or equal the given value."""
  coeff_lte: Int

  """All values greater than the given value."""
  coeff_gt: Int

  """All values greater than or equal the given value."""
  coeff_gte: Int
  candExamSecretCode: String

  """All values that are not equal to given value."""
  candExamSecretCode_not: String

  """All values that are contained in given list."""
  candExamSecretCode_in: [String!]

  """All values that are not contained in given list."""
  candExamSecretCode_not_in: [String!]

  """All values less than the given value."""
  candExamSecretCode_lt: String

  """All values less than or equal the given value."""
  candExamSecretCode_lte: String

  """All values greater than the given value."""
  candExamSecretCode_gt: String

  """All values greater than or equal the given value."""
  candExamSecretCode_gte: String

  """All values containing the given string."""
  candExamSecretCode_contains: String

  """All values not containing the given string."""
  candExamSecretCode_not_contains: String

  """All values starting with the given string."""
  candExamSecretCode_starts_with: String

  """All values not starting with the given string."""
  candExamSecretCode_not_starts_with: String

  """All values ending with the given string."""
  candExamSecretCode_ends_with: String

  """All values not ending with the given string."""
  candExamSecretCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ScoreSubscriptionPayload {
  mutation: MutationType!
  node: Score
  updatedFields: [String!]
  previousValues: ScorePreviousValues
}

input ScoreSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoreWhereInput
}

input ScoreUpdateInput {
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int
  candExamSecretCode: String
  registration: RegistrationUpdateOneRequiredWithoutScoresInput
  subjectSeries: SubjectSeriesUpdateOneRequiredInput
}

input ScoreUpdateManyDataInput {
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int
  candExamSecretCode: String
}

input ScoreUpdateManyMutationInput {
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int
  candExamSecretCode: String
}

input ScoreUpdateManyWithoutRegistrationInput {
  create: [ScoreCreateWithoutRegistrationInput!]
  connect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  disconnect: [ScoreWhereUniqueInput!]
  delete: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutRegistrationInput!]
  updateMany: [ScoreUpdateManyWithWhereNestedInput!]
  deleteMany: [ScoreScalarWhereInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutRegistrationInput!]
}

input ScoreUpdateManyWithWhereNestedInput {
  where: ScoreScalarWhereInput!
  data: ScoreUpdateManyDataInput!
}

input ScoreUpdateWithoutRegistrationDataInput {
  subjectAve: Float
  subjectTotal: Float
  presence: Boolean
  coeff: Int
  candExamSecretCode: String
  subjectSeries: SubjectSeriesUpdateOneRequiredInput
}

input ScoreUpdateWithWhereUniqueWithoutRegistrationInput {
  where: ScoreWhereUniqueInput!
  data: ScoreUpdateWithoutRegistrationDataInput!
}

input ScoreUpsertWithWhereUniqueWithoutRegistrationInput {
  where: ScoreWhereUniqueInput!
  update: ScoreUpdateWithoutRegistrationDataInput!
  create: ScoreCreateWithoutRegistrationInput!
}

input ScoreWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectAve: Float

  """All values that are not equal to given value."""
  subjectAve_not: Float

  """All values that are contained in given list."""
  subjectAve_in: [Float!]

  """All values that are not contained in given list."""
  subjectAve_not_in: [Float!]

  """All values less than the given value."""
  subjectAve_lt: Float

  """All values less than or equal the given value."""
  subjectAve_lte: Float

  """All values greater than the given value."""
  subjectAve_gt: Float

  """All values greater than or equal the given value."""
  subjectAve_gte: Float
  subjectTotal: Float

  """All values that are not equal to given value."""
  subjectTotal_not: Float

  """All values that are contained in given list."""
  subjectTotal_in: [Float!]

  """All values that are not contained in given list."""
  subjectTotal_not_in: [Float!]

  """All values less than the given value."""
  subjectTotal_lt: Float

  """All values less than or equal the given value."""
  subjectTotal_lte: Float

  """All values greater than the given value."""
  subjectTotal_gt: Float

  """All values greater than or equal the given value."""
  subjectTotal_gte: Float
  presence: Boolean

  """All values that are not equal to given value."""
  presence_not: Boolean
  coeff: Int

  """All values that are not equal to given value."""
  coeff_not: Int

  """All values that are contained in given list."""
  coeff_in: [Int!]

  """All values that are not contained in given list."""
  coeff_not_in: [Int!]

  """All values less than the given value."""
  coeff_lt: Int

  """All values less than or equal the given value."""
  coeff_lte: Int

  """All values greater than the given value."""
  coeff_gt: Int

  """All values greater than or equal the given value."""
  coeff_gte: Int
  candExamSecretCode: String

  """All values that are not equal to given value."""
  candExamSecretCode_not: String

  """All values that are contained in given list."""
  candExamSecretCode_in: [String!]

  """All values that are not contained in given list."""
  candExamSecretCode_not_in: [String!]

  """All values less than the given value."""
  candExamSecretCode_lt: String

  """All values less than or equal the given value."""
  candExamSecretCode_lte: String

  """All values greater than the given value."""
  candExamSecretCode_gt: String

  """All values greater than or equal the given value."""
  candExamSecretCode_gte: String

  """All values containing the given string."""
  candExamSecretCode_contains: String

  """All values not containing the given string."""
  candExamSecretCode_not_contains: String

  """All values starting with the given string."""
  candExamSecretCode_starts_with: String

  """All values not starting with the given string."""
  candExamSecretCode_not_starts_with: String

  """All values ending with the given string."""
  candExamSecretCode_ends_with: String

  """All values not ending with the given string."""
  candExamSecretCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  registration: RegistrationWhereInput
  subjectSeries: SubjectSeriesWhereInput
}

input ScoreWhereUniqueInput {
  id: ID
}

type Series implements Node {
  id: ID!
  seriesName: String!
  seriesCode: String!
  subjectSeries(where: SubjectSeriesWhereInput, orderBy: SubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSeries!]
  centerExamSessionSeries(where: CenterExamSessionSeriesWhereInput, orderBy: CenterExamSessionSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterExamSessionSeries!]
  createdAt: DateTime!
  updatedAt: DateTime!
  educationType: EducationType!
}

"""A connection to a list of items."""
type SeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeriesEdge]!
  aggregate: AggregateSeries!
}

input SeriesCreateInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  subjectSeries: SubjectSeriesCreateManyWithoutSeriesInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutSeriesInput
  educationType: EducationTypeCreateOneWithoutSeriesInput!
}

input SeriesCreateManyWithoutEducationTypeInput {
  create: [SeriesCreateWithoutEducationTypeInput!]
  connect: [SeriesWhereUniqueInput!]
}

input SeriesCreateOneInput {
  create: SeriesCreateInput
  connect: SeriesWhereUniqueInput
}

input SeriesCreateOneWithoutCenterExamSessionSeriesInput {
  create: SeriesCreateWithoutCenterExamSessionSeriesInput
  connect: SeriesWhereUniqueInput
}

input SeriesCreateOneWithoutSubjectSeriesInput {
  create: SeriesCreateWithoutSubjectSeriesInput
  connect: SeriesWhereUniqueInput
}

input SeriesCreateWithoutCenterExamSessionSeriesInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  subjectSeries: SubjectSeriesCreateManyWithoutSeriesInput
  educationType: EducationTypeCreateOneWithoutSeriesInput!
}

input SeriesCreateWithoutEducationTypeInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  subjectSeries: SubjectSeriesCreateManyWithoutSeriesInput
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutSeriesInput
}

input SeriesCreateWithoutSubjectSeriesInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  centerExamSessionSeries: CenterExamSessionSeriesCreateManyWithoutSeriesInput
  educationType: EducationTypeCreateOneWithoutSeriesInput!
}

"""An edge in a connection."""
type SeriesEdge {
  """The item at the end of the edge."""
  node: Series!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeriesOrderByInput {
  id_ASC
  id_DESC
  seriesName_ASC
  seriesName_DESC
  seriesCode_ASC
  seriesCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SeriesPreviousValues {
  id: ID!
  seriesName: String!
  seriesCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SeriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  seriesName: String

  """All values that are not equal to given value."""
  seriesName_not: String

  """All values that are contained in given list."""
  seriesName_in: [String!]

  """All values that are not contained in given list."""
  seriesName_not_in: [String!]

  """All values less than the given value."""
  seriesName_lt: String

  """All values less than or equal the given value."""
  seriesName_lte: String

  """All values greater than the given value."""
  seriesName_gt: String

  """All values greater than or equal the given value."""
  seriesName_gte: String

  """All values containing the given string."""
  seriesName_contains: String

  """All values not containing the given string."""
  seriesName_not_contains: String

  """All values starting with the given string."""
  seriesName_starts_with: String

  """All values not starting with the given string."""
  seriesName_not_starts_with: String

  """All values ending with the given string."""
  seriesName_ends_with: String

  """All values not ending with the given string."""
  seriesName_not_ends_with: String
  seriesCode: String

  """All values that are not equal to given value."""
  seriesCode_not: String

  """All values that are contained in given list."""
  seriesCode_in: [String!]

  """All values that are not contained in given list."""
  seriesCode_not_in: [String!]

  """All values less than the given value."""
  seriesCode_lt: String

  """All values less than or equal the given value."""
  seriesCode_lte: String

  """All values greater than the given value."""
  seriesCode_gt: String

  """All values greater than or equal the given value."""
  seriesCode_gte: String

  """All values containing the given string."""
  seriesCode_contains: String

  """All values not containing the given string."""
  seriesCode_not_contains: String

  """All values starting with the given string."""
  seriesCode_starts_with: String

  """All values not starting with the given string."""
  seriesCode_not_starts_with: String

  """All values ending with the given string."""
  seriesCode_ends_with: String

  """All values not ending with the given string."""
  seriesCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SeriesSubscriptionPayload {
  mutation: MutationType!
  node: Series
  updatedFields: [String!]
  previousValues: SeriesPreviousValues
}

input SeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeriesWhereInput
}

input SeriesUpdateDataInput {
  seriesName: String
  seriesCode: String
  subjectSeries: SubjectSeriesUpdateManyWithoutSeriesInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutSeriesInput
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
}

input SeriesUpdateInput {
  seriesName: String
  seriesCode: String
  subjectSeries: SubjectSeriesUpdateManyWithoutSeriesInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutSeriesInput
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
}

input SeriesUpdateManyDataInput {
  seriesName: String
  seriesCode: String
}

input SeriesUpdateManyMutationInput {
  seriesName: String
  seriesCode: String
}

input SeriesUpdateManyWithoutEducationTypeInput {
  create: [SeriesCreateWithoutEducationTypeInput!]
  connect: [SeriesWhereUniqueInput!]
  set: [SeriesWhereUniqueInput!]
  disconnect: [SeriesWhereUniqueInput!]
  delete: [SeriesWhereUniqueInput!]
  update: [SeriesUpdateWithWhereUniqueWithoutEducationTypeInput!]
  updateMany: [SeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [SeriesScalarWhereInput!]
  upsert: [SeriesUpsertWithWhereUniqueWithoutEducationTypeInput!]
}

input SeriesUpdateManyWithWhereNestedInput {
  where: SeriesScalarWhereInput!
  data: SeriesUpdateManyDataInput!
}

input SeriesUpdateOneRequiredInput {
  create: SeriesCreateInput
  connect: SeriesWhereUniqueInput
  update: SeriesUpdateDataInput
  upsert: SeriesUpsertNestedInput
}

input SeriesUpdateOneRequiredWithoutCenterExamSessionSeriesInput {
  create: SeriesCreateWithoutCenterExamSessionSeriesInput
  connect: SeriesWhereUniqueInput
  update: SeriesUpdateWithoutCenterExamSessionSeriesDataInput
  upsert: SeriesUpsertWithoutCenterExamSessionSeriesInput
}

input SeriesUpdateOneRequiredWithoutSubjectSeriesInput {
  create: SeriesCreateWithoutSubjectSeriesInput
  connect: SeriesWhereUniqueInput
  update: SeriesUpdateWithoutSubjectSeriesDataInput
  upsert: SeriesUpsertWithoutSubjectSeriesInput
}

input SeriesUpdateWithoutCenterExamSessionSeriesDataInput {
  seriesName: String
  seriesCode: String
  subjectSeries: SubjectSeriesUpdateManyWithoutSeriesInput
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
}

input SeriesUpdateWithoutEducationTypeDataInput {
  seriesName: String
  seriesCode: String
  subjectSeries: SubjectSeriesUpdateManyWithoutSeriesInput
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutSeriesInput
}

input SeriesUpdateWithoutSubjectSeriesDataInput {
  seriesName: String
  seriesCode: String
  centerExamSessionSeries: CenterExamSessionSeriesUpdateManyWithoutSeriesInput
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
}

input SeriesUpdateWithWhereUniqueWithoutEducationTypeInput {
  where: SeriesWhereUniqueInput!
  data: SeriesUpdateWithoutEducationTypeDataInput!
}

input SeriesUpsertNestedInput {
  update: SeriesUpdateDataInput!
  create: SeriesCreateInput!
}

input SeriesUpsertWithoutCenterExamSessionSeriesInput {
  update: SeriesUpdateWithoutCenterExamSessionSeriesDataInput!
  create: SeriesCreateWithoutCenterExamSessionSeriesInput!
}

input SeriesUpsertWithoutSubjectSeriesInput {
  update: SeriesUpdateWithoutSubjectSeriesDataInput!
  create: SeriesCreateWithoutSubjectSeriesInput!
}

input SeriesUpsertWithWhereUniqueWithoutEducationTypeInput {
  where: SeriesWhereUniqueInput!
  update: SeriesUpdateWithoutEducationTypeDataInput!
  create: SeriesCreateWithoutEducationTypeInput!
}

input SeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  seriesName: String

  """All values that are not equal to given value."""
  seriesName_not: String

  """All values that are contained in given list."""
  seriesName_in: [String!]

  """All values that are not contained in given list."""
  seriesName_not_in: [String!]

  """All values less than the given value."""
  seriesName_lt: String

  """All values less than or equal the given value."""
  seriesName_lte: String

  """All values greater than the given value."""
  seriesName_gt: String

  """All values greater than or equal the given value."""
  seriesName_gte: String

  """All values containing the given string."""
  seriesName_contains: String

  """All values not containing the given string."""
  seriesName_not_contains: String

  """All values starting with the given string."""
  seriesName_starts_with: String

  """All values not starting with the given string."""
  seriesName_not_starts_with: String

  """All values ending with the given string."""
  seriesName_ends_with: String

  """All values not ending with the given string."""
  seriesName_not_ends_with: String
  seriesCode: String

  """All values that are not equal to given value."""
  seriesCode_not: String

  """All values that are contained in given list."""
  seriesCode_in: [String!]

  """All values that are not contained in given list."""
  seriesCode_not_in: [String!]

  """All values less than the given value."""
  seriesCode_lt: String

  """All values less than or equal the given value."""
  seriesCode_lte: String

  """All values greater than the given value."""
  seriesCode_gt: String

  """All values greater than or equal the given value."""
  seriesCode_gte: String

  """All values containing the given string."""
  seriesCode_contains: String

  """All values not containing the given string."""
  seriesCode_not_contains: String

  """All values starting with the given string."""
  seriesCode_starts_with: String

  """All values not starting with the given string."""
  seriesCode_not_starts_with: String

  """All values ending with the given string."""
  seriesCode_ends_with: String

  """All values not ending with the given string."""
  seriesCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  subjectSeries_every: SubjectSeriesWhereInput
  subjectSeries_some: SubjectSeriesWhereInput
  subjectSeries_none: SubjectSeriesWhereInput
  centerExamSessionSeries_every: CenterExamSessionSeriesWhereInput
  centerExamSessionSeries_some: CenterExamSessionSeriesWhereInput
  centerExamSessionSeries_none: CenterExamSessionSeriesWhereInput
  educationType: EducationTypeWhereInput
}

input SeriesWhereUniqueInput {
  id: ID
  seriesCode: String
}

type Session implements Node {
  id: ID!
  examSession(where: ExamSessionWhereInput, orderBy: ExamSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExamSession!]
  sessionName: String!
  sessionCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  sessionName: String!
  sessionCode: String!
  examSession: ExamSessionCreateManyWithoutSessionInput
}

input SessionCreateOneWithoutExamSessionInput {
  create: SessionCreateWithoutExamSessionInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutExamSessionInput {
  id: ID
  sessionName: String!
  sessionCode: String!
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  sessionName_ASC
  sessionName_DESC
  sessionCode_ASC
  sessionCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  sessionName: String!
  sessionCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  sessionName: String
  sessionCode: String
  examSession: ExamSessionUpdateManyWithoutSessionInput
}

input SessionUpdateManyMutationInput {
  sessionName: String
  sessionCode: String
}

input SessionUpdateOneRequiredWithoutExamSessionInput {
  create: SessionCreateWithoutExamSessionInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutExamSessionDataInput
  upsert: SessionUpsertWithoutExamSessionInput
}

input SessionUpdateWithoutExamSessionDataInput {
  sessionName: String
  sessionCode: String
}

input SessionUpsertWithoutExamSessionInput {
  update: SessionUpdateWithoutExamSessionDataInput!
  create: SessionCreateWithoutExamSessionInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sessionName: String

  """All values that are not equal to given value."""
  sessionName_not: String

  """All values that are contained in given list."""
  sessionName_in: [String!]

  """All values that are not contained in given list."""
  sessionName_not_in: [String!]

  """All values less than the given value."""
  sessionName_lt: String

  """All values less than or equal the given value."""
  sessionName_lte: String

  """All values greater than the given value."""
  sessionName_gt: String

  """All values greater than or equal the given value."""
  sessionName_gte: String

  """All values containing the given string."""
  sessionName_contains: String

  """All values not containing the given string."""
  sessionName_not_contains: String

  """All values starting with the given string."""
  sessionName_starts_with: String

  """All values not starting with the given string."""
  sessionName_not_starts_with: String

  """All values ending with the given string."""
  sessionName_ends_with: String

  """All values not ending with the given string."""
  sessionName_not_ends_with: String
  sessionCode: String

  """All values that are not equal to given value."""
  sessionCode_not: String

  """All values that are contained in given list."""
  sessionCode_in: [String!]

  """All values that are not contained in given list."""
  sessionCode_not_in: [String!]

  """All values less than the given value."""
  sessionCode_lt: String

  """All values less than or equal the given value."""
  sessionCode_lte: String

  """All values greater than the given value."""
  sessionCode_gt: String

  """All values greater than or equal the given value."""
  sessionCode_gte: String

  """All values containing the given string."""
  sessionCode_contains: String

  """All values not containing the given string."""
  sessionCode_not_contains: String

  """All values starting with the given string."""
  sessionCode_starts_with: String

  """All values not starting with the given string."""
  sessionCode_not_starts_with: String

  """All values ending with the given string."""
  sessionCode_ends_with: String

  """All values not ending with the given string."""
  sessionCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  examSession_every: ExamSessionWhereInput
  examSession_some: ExamSessionWhereInput
  examSession_none: ExamSessionWhereInput
}

input SessionWhereUniqueInput {
  id: ID
  sessionName: String
  sessionCode: String
}

type SubDivision implements Node {
  id: ID!
  subDivName: String!
  subDivCode: String!
  division: Division!
  createdAt: DateTime!
  updatedAt: DateTime!
  town(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Town!]
}

"""A connection to a list of items."""
type SubDivisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubDivisionEdge]!
  aggregate: AggregateSubDivision!
}

input SubDivisionCreateInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  division: DivisionCreateOneWithoutSubDivisionInput!
  town: TownCreateManyWithoutSubDivInput
}

input SubDivisionCreateManyWithoutDivisionInput {
  create: [SubDivisionCreateWithoutDivisionInput!]
  connect: [SubDivisionWhereUniqueInput!]
}

input SubDivisionCreateOneWithoutTownInput {
  create: SubDivisionCreateWithoutTownInput
  connect: SubDivisionWhereUniqueInput
}

input SubDivisionCreateWithoutDivisionInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  town: TownCreateManyWithoutSubDivInput
}

input SubDivisionCreateWithoutTownInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  division: DivisionCreateOneWithoutSubDivisionInput!
}

"""An edge in a connection."""
type SubDivisionEdge {
  """The item at the end of the edge."""
  node: SubDivision!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubDivisionOrderByInput {
  id_ASC
  id_DESC
  subDivName_ASC
  subDivName_DESC
  subDivCode_ASC
  subDivCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubDivisionPreviousValues {
  id: ID!
  subDivName: String!
  subDivCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SubDivisionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subDivName: String

  """All values that are not equal to given value."""
  subDivName_not: String

  """All values that are contained in given list."""
  subDivName_in: [String!]

  """All values that are not contained in given list."""
  subDivName_not_in: [String!]

  """All values less than the given value."""
  subDivName_lt: String

  """All values less than or equal the given value."""
  subDivName_lte: String

  """All values greater than the given value."""
  subDivName_gt: String

  """All values greater than or equal the given value."""
  subDivName_gte: String

  """All values containing the given string."""
  subDivName_contains: String

  """All values not containing the given string."""
  subDivName_not_contains: String

  """All values starting with the given string."""
  subDivName_starts_with: String

  """All values not starting with the given string."""
  subDivName_not_starts_with: String

  """All values ending with the given string."""
  subDivName_ends_with: String

  """All values not ending with the given string."""
  subDivName_not_ends_with: String
  subDivCode: String

  """All values that are not equal to given value."""
  subDivCode_not: String

  """All values that are contained in given list."""
  subDivCode_in: [String!]

  """All values that are not contained in given list."""
  subDivCode_not_in: [String!]

  """All values less than the given value."""
  subDivCode_lt: String

  """All values less than or equal the given value."""
  subDivCode_lte: String

  """All values greater than the given value."""
  subDivCode_gt: String

  """All values greater than or equal the given value."""
  subDivCode_gte: String

  """All values containing the given string."""
  subDivCode_contains: String

  """All values not containing the given string."""
  subDivCode_not_contains: String

  """All values starting with the given string."""
  subDivCode_starts_with: String

  """All values not starting with the given string."""
  subDivCode_not_starts_with: String

  """All values ending with the given string."""
  subDivCode_ends_with: String

  """All values not ending with the given string."""
  subDivCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SubDivisionSubscriptionPayload {
  mutation: MutationType!
  node: SubDivision
  updatedFields: [String!]
  previousValues: SubDivisionPreviousValues
}

input SubDivisionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubDivisionWhereInput
}

input SubDivisionUpdateInput {
  subDivName: String
  subDivCode: String
  division: DivisionUpdateOneRequiredWithoutSubDivisionInput
  town: TownUpdateManyWithoutSubDivInput
}

input SubDivisionUpdateManyDataInput {
  subDivName: String
  subDivCode: String
}

input SubDivisionUpdateManyMutationInput {
  subDivName: String
  subDivCode: String
}

input SubDivisionUpdateManyWithoutDivisionInput {
  create: [SubDivisionCreateWithoutDivisionInput!]
  connect: [SubDivisionWhereUniqueInput!]
  set: [SubDivisionWhereUniqueInput!]
  disconnect: [SubDivisionWhereUniqueInput!]
  delete: [SubDivisionWhereUniqueInput!]
  update: [SubDivisionUpdateWithWhereUniqueWithoutDivisionInput!]
  updateMany: [SubDivisionUpdateManyWithWhereNestedInput!]
  deleteMany: [SubDivisionScalarWhereInput!]
  upsert: [SubDivisionUpsertWithWhereUniqueWithoutDivisionInput!]
}

input SubDivisionUpdateManyWithWhereNestedInput {
  where: SubDivisionScalarWhereInput!
  data: SubDivisionUpdateManyDataInput!
}

input SubDivisionUpdateOneRequiredWithoutTownInput {
  create: SubDivisionCreateWithoutTownInput
  connect: SubDivisionWhereUniqueInput
  update: SubDivisionUpdateWithoutTownDataInput
  upsert: SubDivisionUpsertWithoutTownInput
}

input SubDivisionUpdateWithoutDivisionDataInput {
  subDivName: String
  subDivCode: String
  town: TownUpdateManyWithoutSubDivInput
}

input SubDivisionUpdateWithoutTownDataInput {
  subDivName: String
  subDivCode: String
  division: DivisionUpdateOneRequiredWithoutSubDivisionInput
}

input SubDivisionUpdateWithWhereUniqueWithoutDivisionInput {
  where: SubDivisionWhereUniqueInput!
  data: SubDivisionUpdateWithoutDivisionDataInput!
}

input SubDivisionUpsertWithoutTownInput {
  update: SubDivisionUpdateWithoutTownDataInput!
  create: SubDivisionCreateWithoutTownInput!
}

input SubDivisionUpsertWithWhereUniqueWithoutDivisionInput {
  where: SubDivisionWhereUniqueInput!
  update: SubDivisionUpdateWithoutDivisionDataInput!
  create: SubDivisionCreateWithoutDivisionInput!
}

input SubDivisionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subDivName: String

  """All values that are not equal to given value."""
  subDivName_not: String

  """All values that are contained in given list."""
  subDivName_in: [String!]

  """All values that are not contained in given list."""
  subDivName_not_in: [String!]

  """All values less than the given value."""
  subDivName_lt: String

  """All values less than or equal the given value."""
  subDivName_lte: String

  """All values greater than the given value."""
  subDivName_gt: String

  """All values greater than or equal the given value."""
  subDivName_gte: String

  """All values containing the given string."""
  subDivName_contains: String

  """All values not containing the given string."""
  subDivName_not_contains: String

  """All values starting with the given string."""
  subDivName_starts_with: String

  """All values not starting with the given string."""
  subDivName_not_starts_with: String

  """All values ending with the given string."""
  subDivName_ends_with: String

  """All values not ending with the given string."""
  subDivName_not_ends_with: String
  subDivCode: String

  """All values that are not equal to given value."""
  subDivCode_not: String

  """All values that are contained in given list."""
  subDivCode_in: [String!]

  """All values that are not contained in given list."""
  subDivCode_not_in: [String!]

  """All values less than the given value."""
  subDivCode_lt: String

  """All values less than or equal the given value."""
  subDivCode_lte: String

  """All values greater than the given value."""
  subDivCode_gt: String

  """All values greater than or equal the given value."""
  subDivCode_gte: String

  """All values containing the given string."""
  subDivCode_contains: String

  """All values not containing the given string."""
  subDivCode_not_contains: String

  """All values starting with the given string."""
  subDivCode_starts_with: String

  """All values not starting with the given string."""
  subDivCode_not_starts_with: String

  """All values ending with the given string."""
  subDivCode_ends_with: String

  """All values not ending with the given string."""
  subDivCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  division: DivisionWhereInput
  town_every: TownWhereInput
  town_some: TownWhereInput
  town_none: TownWhereInput
}

input SubDivisionWhereUniqueInput {
  id: ID
  subDivCode: String
}

type Subject implements Node {
  id: ID!
  subjectName: String!
  subjectCode: String!
  subjectType: SubjectType!
  educType: EducationType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  subjectName: String!
  subjectCode: String!
  subjectType: SubjectTypeCreateOneInput!
  educType: EducationTypeCreateOneWithoutSubjectInput!
}

input SubjectCreateManyWithoutEducTypeInput {
  create: [SubjectCreateWithoutEducTypeInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutEducTypeInput {
  id: ID
  subjectName: String!
  subjectCode: String!
  subjectType: SubjectTypeCreateOneInput!
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  subjectName_ASC
  subjectName_DESC
  subjectCode_ASC
  subjectCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubjectPreviousValues {
  id: ID!
  subjectName: String!
  subjectCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SubjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectName: String

  """All values that are not equal to given value."""
  subjectName_not: String

  """All values that are contained in given list."""
  subjectName_in: [String!]

  """All values that are not contained in given list."""
  subjectName_not_in: [String!]

  """All values less than the given value."""
  subjectName_lt: String

  """All values less than or equal the given value."""
  subjectName_lte: String

  """All values greater than the given value."""
  subjectName_gt: String

  """All values greater than or equal the given value."""
  subjectName_gte: String

  """All values containing the given string."""
  subjectName_contains: String

  """All values not containing the given string."""
  subjectName_not_contains: String

  """All values starting with the given string."""
  subjectName_starts_with: String

  """All values not starting with the given string."""
  subjectName_not_starts_with: String

  """All values ending with the given string."""
  subjectName_ends_with: String

  """All values not ending with the given string."""
  subjectName_not_ends_with: String
  subjectCode: String

  """All values that are not equal to given value."""
  subjectCode_not: String

  """All values that are contained in given list."""
  subjectCode_in: [String!]

  """All values that are not contained in given list."""
  subjectCode_not_in: [String!]

  """All values less than the given value."""
  subjectCode_lt: String

  """All values less than or equal the given value."""
  subjectCode_lte: String

  """All values greater than the given value."""
  subjectCode_gt: String

  """All values greater than or equal the given value."""
  subjectCode_gte: String

  """All values containing the given string."""
  subjectCode_contains: String

  """All values not containing the given string."""
  subjectCode_not_contains: String

  """All values starting with the given string."""
  subjectCode_starts_with: String

  """All values not starting with the given string."""
  subjectCode_not_starts_with: String

  """All values ending with the given string."""
  subjectCode_ends_with: String

  """All values not ending with the given string."""
  subjectCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SubjectSeries implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  series: Series!
  coeff: Int!
  subjectName: String!
  subjectCode: String!
}

"""A connection to a list of items."""
type SubjectSeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectSeriesEdge]!
  aggregate: AggregateSubjectSeries!
}

input SubjectSeriesCreateInput {
  id: ID
  coeff: Int!
  subjectName: String!
  subjectCode: String!
  series: SeriesCreateOneWithoutSubjectSeriesInput!
}

input SubjectSeriesCreateManyWithoutSeriesInput {
  create: [SubjectSeriesCreateWithoutSeriesInput!]
  connect: [SubjectSeriesWhereUniqueInput!]
}

input SubjectSeriesCreateOneInput {
  create: SubjectSeriesCreateInput
  connect: SubjectSeriesWhereUniqueInput
}

input SubjectSeriesCreateWithoutSeriesInput {
  id: ID
  coeff: Int!
  subjectName: String!
  subjectCode: String!
}

"""An edge in a connection."""
type SubjectSeriesEdge {
  """The item at the end of the edge."""
  node: SubjectSeries!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectSeriesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  coeff_ASC
  coeff_DESC
  subjectName_ASC
  subjectName_DESC
  subjectCode_ASC
  subjectCode_DESC
}

type SubjectSeriesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  coeff: Int!
  subjectName: String!
  subjectCode: String!
}

input SubjectSeriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSeriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSeriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSeriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  coeff: Int

  """All values that are not equal to given value."""
  coeff_not: Int

  """All values that are contained in given list."""
  coeff_in: [Int!]

  """All values that are not contained in given list."""
  coeff_not_in: [Int!]

  """All values less than the given value."""
  coeff_lt: Int

  """All values less than or equal the given value."""
  coeff_lte: Int

  """All values greater than the given value."""
  coeff_gt: Int

  """All values greater than or equal the given value."""
  coeff_gte: Int
  subjectName: String

  """All values that are not equal to given value."""
  subjectName_not: String

  """All values that are contained in given list."""
  subjectName_in: [String!]

  """All values that are not contained in given list."""
  subjectName_not_in: [String!]

  """All values less than the given value."""
  subjectName_lt: String

  """All values less than or equal the given value."""
  subjectName_lte: String

  """All values greater than the given value."""
  subjectName_gt: String

  """All values greater than or equal the given value."""
  subjectName_gte: String

  """All values containing the given string."""
  subjectName_contains: String

  """All values not containing the given string."""
  subjectName_not_contains: String

  """All values starting with the given string."""
  subjectName_starts_with: String

  """All values not starting with the given string."""
  subjectName_not_starts_with: String

  """All values ending with the given string."""
  subjectName_ends_with: String

  """All values not ending with the given string."""
  subjectName_not_ends_with: String
  subjectCode: String

  """All values that are not equal to given value."""
  subjectCode_not: String

  """All values that are contained in given list."""
  subjectCode_in: [String!]

  """All values that are not contained in given list."""
  subjectCode_not_in: [String!]

  """All values less than the given value."""
  subjectCode_lt: String

  """All values less than or equal the given value."""
  subjectCode_lte: String

  """All values greater than the given value."""
  subjectCode_gt: String

  """All values greater than or equal the given value."""
  subjectCode_gte: String

  """All values containing the given string."""
  subjectCode_contains: String

  """All values not containing the given string."""
  subjectCode_not_contains: String

  """All values starting with the given string."""
  subjectCode_starts_with: String

  """All values not starting with the given string."""
  subjectCode_not_starts_with: String

  """All values ending with the given string."""
  subjectCode_ends_with: String

  """All values not ending with the given string."""
  subjectCode_not_ends_with: String
}

type SubjectSeriesSubscriptionPayload {
  mutation: MutationType!
  node: SubjectSeries
  updatedFields: [String!]
  previousValues: SubjectSeriesPreviousValues
}

input SubjectSeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSeriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectSeriesWhereInput
}

input SubjectSeriesUpdateDataInput {
  coeff: Int
  subjectName: String
  subjectCode: String
  series: SeriesUpdateOneRequiredWithoutSubjectSeriesInput
}

input SubjectSeriesUpdateInput {
  coeff: Int
  subjectName: String
  subjectCode: String
  series: SeriesUpdateOneRequiredWithoutSubjectSeriesInput
}

input SubjectSeriesUpdateManyDataInput {
  coeff: Int
  subjectName: String
  subjectCode: String
}

input SubjectSeriesUpdateManyMutationInput {
  coeff: Int
  subjectName: String
  subjectCode: String
}

input SubjectSeriesUpdateManyWithoutSeriesInput {
  create: [SubjectSeriesCreateWithoutSeriesInput!]
  connect: [SubjectSeriesWhereUniqueInput!]
  set: [SubjectSeriesWhereUniqueInput!]
  disconnect: [SubjectSeriesWhereUniqueInput!]
  delete: [SubjectSeriesWhereUniqueInput!]
  update: [SubjectSeriesUpdateWithWhereUniqueWithoutSeriesInput!]
  updateMany: [SubjectSeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectSeriesScalarWhereInput!]
  upsert: [SubjectSeriesUpsertWithWhereUniqueWithoutSeriesInput!]
}

input SubjectSeriesUpdateManyWithWhereNestedInput {
  where: SubjectSeriesScalarWhereInput!
  data: SubjectSeriesUpdateManyDataInput!
}

input SubjectSeriesUpdateOneRequiredInput {
  create: SubjectSeriesCreateInput
  connect: SubjectSeriesWhereUniqueInput
  update: SubjectSeriesUpdateDataInput
  upsert: SubjectSeriesUpsertNestedInput
}

input SubjectSeriesUpdateWithoutSeriesDataInput {
  coeff: Int
  subjectName: String
  subjectCode: String
}

input SubjectSeriesUpdateWithWhereUniqueWithoutSeriesInput {
  where: SubjectSeriesWhereUniqueInput!
  data: SubjectSeriesUpdateWithoutSeriesDataInput!
}

input SubjectSeriesUpsertNestedInput {
  update: SubjectSeriesUpdateDataInput!
  create: SubjectSeriesCreateInput!
}

input SubjectSeriesUpsertWithWhereUniqueWithoutSeriesInput {
  where: SubjectSeriesWhereUniqueInput!
  update: SubjectSeriesUpdateWithoutSeriesDataInput!
  create: SubjectSeriesCreateWithoutSeriesInput!
}

input SubjectSeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  coeff: Int

  """All values that are not equal to given value."""
  coeff_not: Int

  """All values that are contained in given list."""
  coeff_in: [Int!]

  """All values that are not contained in given list."""
  coeff_not_in: [Int!]

  """All values less than the given value."""
  coeff_lt: Int

  """All values less than or equal the given value."""
  coeff_lte: Int

  """All values greater than the given value."""
  coeff_gt: Int

  """All values greater than or equal the given value."""
  coeff_gte: Int
  subjectName: String

  """All values that are not equal to given value."""
  subjectName_not: String

  """All values that are contained in given list."""
  subjectName_in: [String!]

  """All values that are not contained in given list."""
  subjectName_not_in: [String!]

  """All values less than the given value."""
  subjectName_lt: String

  """All values less than or equal the given value."""
  subjectName_lte: String

  """All values greater than the given value."""
  subjectName_gt: String

  """All values greater than or equal the given value."""
  subjectName_gte: String

  """All values containing the given string."""
  subjectName_contains: String

  """All values not containing the given string."""
  subjectName_not_contains: String

  """All values starting with the given string."""
  subjectName_starts_with: String

  """All values not starting with the given string."""
  subjectName_not_starts_with: String

  """All values ending with the given string."""
  subjectName_ends_with: String

  """All values not ending with the given string."""
  subjectName_not_ends_with: String
  subjectCode: String

  """All values that are not equal to given value."""
  subjectCode_not: String

  """All values that are contained in given list."""
  subjectCode_in: [String!]

  """All values that are not contained in given list."""
  subjectCode_not_in: [String!]

  """All values less than the given value."""
  subjectCode_lt: String

  """All values less than or equal the given value."""
  subjectCode_lte: String

  """All values greater than the given value."""
  subjectCode_gt: String

  """All values greater than or equal the given value."""
  subjectCode_gte: String

  """All values containing the given string."""
  subjectCode_contains: String

  """All values not containing the given string."""
  subjectCode_not_contains: String

  """All values starting with the given string."""
  subjectCode_starts_with: String

  """All values not starting with the given string."""
  subjectCode_not_starts_with: String

  """All values ending with the given string."""
  subjectCode_ends_with: String

  """All values not ending with the given string."""
  subjectCode_not_ends_with: String
  series: SeriesWhereInput
}

input SubjectSeriesWhereUniqueInput {
  id: ID
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

type SubjectType implements Node {
  id: ID!
  subjectTypeName: String!
  subjectTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SubjectTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectTypeEdge]!
  aggregate: AggregateSubjectType!
}

input SubjectTypeCreateInput {
  id: ID
  subjectTypeName: String!
  subjectTypeCode: String!
}

input SubjectTypeCreateOneInput {
  create: SubjectTypeCreateInput
  connect: SubjectTypeWhereUniqueInput
}

"""An edge in a connection."""
type SubjectTypeEdge {
  """The item at the end of the edge."""
  node: SubjectType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectTypeOrderByInput {
  id_ASC
  id_DESC
  subjectTypeName_ASC
  subjectTypeName_DESC
  subjectTypeCode_ASC
  subjectTypeCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubjectTypePreviousValues {
  id: ID!
  subjectTypeName: String!
  subjectTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubjectTypeSubscriptionPayload {
  mutation: MutationType!
  node: SubjectType
  updatedFields: [String!]
  previousValues: SubjectTypePreviousValues
}

input SubjectTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectTypeWhereInput
}

input SubjectTypeUpdateDataInput {
  subjectTypeName: String
  subjectTypeCode: String
}

input SubjectTypeUpdateInput {
  subjectTypeName: String
  subjectTypeCode: String
}

input SubjectTypeUpdateManyMutationInput {
  subjectTypeName: String
  subjectTypeCode: String
}

input SubjectTypeUpdateOneRequiredInput {
  create: SubjectTypeCreateInput
  connect: SubjectTypeWhereUniqueInput
  update: SubjectTypeUpdateDataInput
  upsert: SubjectTypeUpsertNestedInput
}

input SubjectTypeUpsertNestedInput {
  update: SubjectTypeUpdateDataInput!
  create: SubjectTypeCreateInput!
}

input SubjectTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectTypeName: String

  """All values that are not equal to given value."""
  subjectTypeName_not: String

  """All values that are contained in given list."""
  subjectTypeName_in: [String!]

  """All values that are not contained in given list."""
  subjectTypeName_not_in: [String!]

  """All values less than the given value."""
  subjectTypeName_lt: String

  """All values less than or equal the given value."""
  subjectTypeName_lte: String

  """All values greater than the given value."""
  subjectTypeName_gt: String

  """All values greater than or equal the given value."""
  subjectTypeName_gte: String

  """All values containing the given string."""
  subjectTypeName_contains: String

  """All values not containing the given string."""
  subjectTypeName_not_contains: String

  """All values starting with the given string."""
  subjectTypeName_starts_with: String

  """All values not starting with the given string."""
  subjectTypeName_not_starts_with: String

  """All values ending with the given string."""
  subjectTypeName_ends_with: String

  """All values not ending with the given string."""
  subjectTypeName_not_ends_with: String
  subjectTypeCode: String

  """All values that are not equal to given value."""
  subjectTypeCode_not: String

  """All values that are contained in given list."""
  subjectTypeCode_in: [String!]

  """All values that are not contained in given list."""
  subjectTypeCode_not_in: [String!]

  """All values less than the given value."""
  subjectTypeCode_lt: String

  """All values less than or equal the given value."""
  subjectTypeCode_lte: String

  """All values greater than the given value."""
  subjectTypeCode_gt: String

  """All values greater than or equal the given value."""
  subjectTypeCode_gte: String

  """All values containing the given string."""
  subjectTypeCode_contains: String

  """All values not containing the given string."""
  subjectTypeCode_not_contains: String

  """All values starting with the given string."""
  subjectTypeCode_starts_with: String

  """All values not starting with the given string."""
  subjectTypeCode_not_starts_with: String

  """All values ending with the given string."""
  subjectTypeCode_ends_with: String

  """All values not ending with the given string."""
  subjectTypeCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SubjectTypeWhereUniqueInput {
  id: ID
  subjectTypeName: String
  subjectTypeCode: String
}

input SubjectUpdateInput {
  subjectName: String
  subjectCode: String
  subjectType: SubjectTypeUpdateOneRequiredInput
  educType: EducationTypeUpdateOneRequiredWithoutSubjectInput
}

input SubjectUpdateManyDataInput {
  subjectName: String
  subjectCode: String
}

input SubjectUpdateManyMutationInput {
  subjectName: String
  subjectCode: String
}

input SubjectUpdateManyWithoutEducTypeInput {
  create: [SubjectCreateWithoutEducTypeInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutEducTypeInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutEducTypeInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutEducTypeDataInput {
  subjectName: String
  subjectCode: String
  subjectType: SubjectTypeUpdateOneRequiredInput
}

input SubjectUpdateWithWhereUniqueWithoutEducTypeInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutEducTypeDataInput!
}

input SubjectUpsertWithWhereUniqueWithoutEducTypeInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutEducTypeDataInput!
  create: SubjectCreateWithoutEducTypeInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectName: String

  """All values that are not equal to given value."""
  subjectName_not: String

  """All values that are contained in given list."""
  subjectName_in: [String!]

  """All values that are not contained in given list."""
  subjectName_not_in: [String!]

  """All values less than the given value."""
  subjectName_lt: String

  """All values less than or equal the given value."""
  subjectName_lte: String

  """All values greater than the given value."""
  subjectName_gt: String

  """All values greater than or equal the given value."""
  subjectName_gte: String

  """All values containing the given string."""
  subjectName_contains: String

  """All values not containing the given string."""
  subjectName_not_contains: String

  """All values starting with the given string."""
  subjectName_starts_with: String

  """All values not starting with the given string."""
  subjectName_not_starts_with: String

  """All values ending with the given string."""
  subjectName_ends_with: String

  """All values not ending with the given string."""
  subjectName_not_ends_with: String
  subjectCode: String

  """All values that are not equal to given value."""
  subjectCode_not: String

  """All values that are contained in given list."""
  subjectCode_in: [String!]

  """All values that are not contained in given list."""
  subjectCode_not_in: [String!]

  """All values less than the given value."""
  subjectCode_lt: String

  """All values less than or equal the given value."""
  subjectCode_lte: String

  """All values greater than the given value."""
  subjectCode_gt: String

  """All values greater than or equal the given value."""
  subjectCode_gte: String

  """All values containing the given string."""
  subjectCode_contains: String

  """All values not containing the given string."""
  subjectCode_not_contains: String

  """All values starting with the given string."""
  subjectCode_starts_with: String

  """All values not starting with the given string."""
  subjectCode_not_starts_with: String

  """All values ending with the given string."""
  subjectCode_ends_with: String

  """All values not ending with the given string."""
  subjectCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  subjectType: SubjectTypeWhereInput
  educType: EducationTypeWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
  subjectName: String
  subjectCode: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  division(where: DivisionSubscriptionWhereInput): DivisionSubscriptionPayload
  subDivision(where: SubDivisionSubscriptionWhereInput): SubDivisionSubscriptionPayload
  town(where: TownSubscriptionWhereInput): TownSubscriptionPayload
  center(where: CenterSubscriptionWhereInput): CenterSubscriptionPayload
  educationType(where: EducationTypeSubscriptionWhereInput): EducationTypeSubscriptionPayload
  exam(where: ExamSubscriptionWhereInput): ExamSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  candidate(where: CandidateSubscriptionWhereInput): CandidateSubscriptionPayload
  rank(where: RankSubscriptionWhereInput): RankSubscriptionPayload
  office(where: OfficeSubscriptionWhereInput): OfficeSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  phase(where: PhaseSubscriptionWhereInput): PhaseSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
  centerExamSession(where: CenterExamSessionSubscriptionWhereInput): CenterExamSessionSubscriptionPayload
  examSession(where: ExamSessionSubscriptionWhereInput): ExamSessionSubscriptionPayload
  centerExamSessionSeries(where: CenterExamSessionSeriesSubscriptionWhereInput): CenterExamSessionSeriesSubscriptionPayload
  score(where: ScoreSubscriptionWhereInput): ScoreSubscriptionPayload
  registration(where: RegistrationSubscriptionWhereInput): RegistrationSubscriptionPayload
  centerExamSessionExaminer(where: CenterExamSessionExaminerSubscriptionWhereInput): CenterExamSessionExaminerSubscriptionPayload
  gender(where: GenderSubscriptionWhereInput): GenderSubscriptionPayload
  examiner(where: ExaminerSubscriptionWhereInput): ExaminerSubscriptionPayload
  subjectSeries(where: SubjectSeriesSubscriptionWhereInput): SubjectSeriesSubscriptionPayload
  series(where: SeriesSubscriptionWhereInput): SeriesSubscriptionPayload
  subjectType(where: SubjectTypeSubscriptionWhereInput): SubjectTypeSubscriptionPayload
  phaseRank(where: PhaseRankSubscriptionWhereInput): PhaseRankSubscriptionPayload
}

type Town implements Node {
  id: ID!
  townName: String!
  townCode: String!
  subDiv: SubDivision!
  office: Office
  createdAt: DateTime!
  updatedAt: DateTime!
  center(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center!]
}

"""A connection to a list of items."""
type TownConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TownEdge]!
  aggregate: AggregateTown!
}

input TownCreateInput {
  id: ID
  townName: String!
  townCode: String!
  subDiv: SubDivisionCreateOneWithoutTownInput!
  office: OfficeCreateOneWithoutTownInput
  center: CenterCreateManyWithoutTownInput
}

input TownCreateManyWithoutOfficeInput {
  create: [TownCreateWithoutOfficeInput!]
  connect: [TownWhereUniqueInput!]
}

input TownCreateManyWithoutSubDivInput {
  create: [TownCreateWithoutSubDivInput!]
  connect: [TownWhereUniqueInput!]
}

input TownCreateOneWithoutCenterInput {
  create: TownCreateWithoutCenterInput
  connect: TownWhereUniqueInput
}

input TownCreateWithoutCenterInput {
  id: ID
  townName: String!
  townCode: String!
  subDiv: SubDivisionCreateOneWithoutTownInput!
  office: OfficeCreateOneWithoutTownInput
}

input TownCreateWithoutOfficeInput {
  id: ID
  townName: String!
  townCode: String!
  subDiv: SubDivisionCreateOneWithoutTownInput!
  center: CenterCreateManyWithoutTownInput
}

input TownCreateWithoutSubDivInput {
  id: ID
  townName: String!
  townCode: String!
  office: OfficeCreateOneWithoutTownInput
  center: CenterCreateManyWithoutTownInput
}

"""An edge in a connection."""
type TownEdge {
  """The item at the end of the edge."""
  node: Town!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TownOrderByInput {
  id_ASC
  id_DESC
  townName_ASC
  townName_DESC
  townCode_ASC
  townCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TownPreviousValues {
  id: ID!
  townName: String!
  townCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TownScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TownScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  townName: String

  """All values that are not equal to given value."""
  townName_not: String

  """All values that are contained in given list."""
  townName_in: [String!]

  """All values that are not contained in given list."""
  townName_not_in: [String!]

  """All values less than the given value."""
  townName_lt: String

  """All values less than or equal the given value."""
  townName_lte: String

  """All values greater than the given value."""
  townName_gt: String

  """All values greater than or equal the given value."""
  townName_gte: String

  """All values containing the given string."""
  townName_contains: String

  """All values not containing the given string."""
  townName_not_contains: String

  """All values starting with the given string."""
  townName_starts_with: String

  """All values not starting with the given string."""
  townName_not_starts_with: String

  """All values ending with the given string."""
  townName_ends_with: String

  """All values not ending with the given string."""
  townName_not_ends_with: String
  townCode: String

  """All values that are not equal to given value."""
  townCode_not: String

  """All values that are contained in given list."""
  townCode_in: [String!]

  """All values that are not contained in given list."""
  townCode_not_in: [String!]

  """All values less than the given value."""
  townCode_lt: String

  """All values less than or equal the given value."""
  townCode_lte: String

  """All values greater than the given value."""
  townCode_gt: String

  """All values greater than or equal the given value."""
  townCode_gte: String

  """All values containing the given string."""
  townCode_contains: String

  """All values not containing the given string."""
  townCode_not_contains: String

  """All values starting with the given string."""
  townCode_starts_with: String

  """All values not starting with the given string."""
  townCode_not_starts_with: String

  """All values ending with the given string."""
  townCode_ends_with: String

  """All values not ending with the given string."""
  townCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TownSubscriptionPayload {
  mutation: MutationType!
  node: Town
  updatedFields: [String!]
  previousValues: TownPreviousValues
}

input TownSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TownSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TownWhereInput
}

input TownUpdateInput {
  townName: String
  townCode: String
  subDiv: SubDivisionUpdateOneRequiredWithoutTownInput
  office: OfficeUpdateOneWithoutTownInput
  center: CenterUpdateManyWithoutTownInput
}

input TownUpdateManyDataInput {
  townName: String
  townCode: String
}

input TownUpdateManyMutationInput {
  townName: String
  townCode: String
}

input TownUpdateManyWithoutOfficeInput {
  create: [TownCreateWithoutOfficeInput!]
  connect: [TownWhereUniqueInput!]
  set: [TownWhereUniqueInput!]
  disconnect: [TownWhereUniqueInput!]
  delete: [TownWhereUniqueInput!]
  update: [TownUpdateWithWhereUniqueWithoutOfficeInput!]
  updateMany: [TownUpdateManyWithWhereNestedInput!]
  deleteMany: [TownScalarWhereInput!]
  upsert: [TownUpsertWithWhereUniqueWithoutOfficeInput!]
}

input TownUpdateManyWithoutSubDivInput {
  create: [TownCreateWithoutSubDivInput!]
  connect: [TownWhereUniqueInput!]
  set: [TownWhereUniqueInput!]
  disconnect: [TownWhereUniqueInput!]
  delete: [TownWhereUniqueInput!]
  update: [TownUpdateWithWhereUniqueWithoutSubDivInput!]
  updateMany: [TownUpdateManyWithWhereNestedInput!]
  deleteMany: [TownScalarWhereInput!]
  upsert: [TownUpsertWithWhereUniqueWithoutSubDivInput!]
}

input TownUpdateManyWithWhereNestedInput {
  where: TownScalarWhereInput!
  data: TownUpdateManyDataInput!
}

input TownUpdateOneRequiredWithoutCenterInput {
  create: TownCreateWithoutCenterInput
  connect: TownWhereUniqueInput
  update: TownUpdateWithoutCenterDataInput
  upsert: TownUpsertWithoutCenterInput
}

input TownUpdateWithoutCenterDataInput {
  townName: String
  townCode: String
  subDiv: SubDivisionUpdateOneRequiredWithoutTownInput
  office: OfficeUpdateOneWithoutTownInput
}

input TownUpdateWithoutOfficeDataInput {
  townName: String
  townCode: String
  subDiv: SubDivisionUpdateOneRequiredWithoutTownInput
  center: CenterUpdateManyWithoutTownInput
}

input TownUpdateWithoutSubDivDataInput {
  townName: String
  townCode: String
  office: OfficeUpdateOneWithoutTownInput
  center: CenterUpdateManyWithoutTownInput
}

input TownUpdateWithWhereUniqueWithoutOfficeInput {
  where: TownWhereUniqueInput!
  data: TownUpdateWithoutOfficeDataInput!
}

input TownUpdateWithWhereUniqueWithoutSubDivInput {
  where: TownWhereUniqueInput!
  data: TownUpdateWithoutSubDivDataInput!
}

input TownUpsertWithoutCenterInput {
  update: TownUpdateWithoutCenterDataInput!
  create: TownCreateWithoutCenterInput!
}

input TownUpsertWithWhereUniqueWithoutOfficeInput {
  where: TownWhereUniqueInput!
  update: TownUpdateWithoutOfficeDataInput!
  create: TownCreateWithoutOfficeInput!
}

input TownUpsertWithWhereUniqueWithoutSubDivInput {
  where: TownWhereUniqueInput!
  update: TownUpdateWithoutSubDivDataInput!
  create: TownCreateWithoutSubDivInput!
}

input TownWhereInput {
  """Logical AND on all given filters."""
  AND: [TownWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  townName: String

  """All values that are not equal to given value."""
  townName_not: String

  """All values that are contained in given list."""
  townName_in: [String!]

  """All values that are not contained in given list."""
  townName_not_in: [String!]

  """All values less than the given value."""
  townName_lt: String

  """All values less than or equal the given value."""
  townName_lte: String

  """All values greater than the given value."""
  townName_gt: String

  """All values greater than or equal the given value."""
  townName_gte: String

  """All values containing the given string."""
  townName_contains: String

  """All values not containing the given string."""
  townName_not_contains: String

  """All values starting with the given string."""
  townName_starts_with: String

  """All values not starting with the given string."""
  townName_not_starts_with: String

  """All values ending with the given string."""
  townName_ends_with: String

  """All values not ending with the given string."""
  townName_not_ends_with: String
  townCode: String

  """All values that are not equal to given value."""
  townCode_not: String

  """All values that are contained in given list."""
  townCode_in: [String!]

  """All values that are not contained in given list."""
  townCode_not_in: [String!]

  """All values less than the given value."""
  townCode_lt: String

  """All values less than or equal the given value."""
  townCode_lte: String

  """All values greater than the given value."""
  townCode_gt: String

  """All values greater than or equal the given value."""
  townCode_gte: String

  """All values containing the given string."""
  townCode_contains: String

  """All values not containing the given string."""
  townCode_not_contains: String

  """All values starting with the given string."""
  townCode_starts_with: String

  """All values not starting with the given string."""
  townCode_not_starts_with: String

  """All values ending with the given string."""
  townCode_ends_with: String

  """All values not ending with the given string."""
  townCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  subDiv: SubDivisionWhereInput
  office: OfficeWhereInput
  center_every: CenterWhereInput
  center_some: CenterWhereInput
  center_none: CenterWhereInput
}

input TownWhereUniqueInput {
  id: ID
  townCode: String
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
